@model CategoryViewModel
@using System.Text.Encodings.Web
@{
    ViewData["Title"] = "Kategori Bilgilerini Düzenle - " + Model.Name;
}

<form asp-action="Edit" id="category-form">
    <div class="container-fluid flex-grow-1 container-p-y">
        <h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light">Ürün Yönetimi/</span><span class="text-muted fw-light">Kategoriler/</span> Kategori Bilgilerini Düzenle</h4>

        <div class="row">
            <partial name="_CreateOrUpdate" />
            <div class="col-lg-3 col-12 invoice-actions">
                <div class="card mb-4">
                    <div class="card-body">
                        <button type="submit" class="btn btn-primary d-grid w-100 mb-2 waves-effect waves-light">
                            <span class="d-flex align-items-center justify-content-center text-nowrap"><i class="ti ti-check ti-xs me-1"></i>Kaydet</span>
                        </button>
                        @if (Model.Id > 0)
                        {
                            <button type="button"
                                    id="btnDeleteCategory"
                                    data-id="@Model.Id"
                                    class="btn btn-danger d-grid w-100 mb-2 waves-effect waves-light">
                                <span class="d-flex align-items-center justify-content-center text-nowrap">
                                    <i class="ti ti-trash ti-xs me-1"></i>Sil
                                </span>
                            </button>


                        }
                        <a href="@Url.Action("List")" class="btn btn-label-secondary d-grid w-100 waves-effect">
                            <span class="d-flex align-items-center justify-content-center text-nowrap"><i class="ti ti-cancel ti-xs me-1"></i>Vazgeç</span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
        <button type="button" class="btn btn-primary" id="ajax-request">Ajax</button>
    </div>
</form>

@section scripts {


    <link rel="stylesheet" href="https://unpkg.com/dropzone@6.0.0-beta.1/dist/dropzone.css" />
    <script src="https://unpkg.com/dropzone@6.0.0-beta.1/dist/dropzone-min.js"></script>

    <style>
        #myDropzoneDiv .dz-message::before {
            display: none !important; /* Ok simgesini gizler */
        }
    </style>
    <script>
        Dropzone.autoDiscover = false;

        let overwriteNext = false;
        let currentMediaId = @((Model.MediaFileId ?? 0));

        const myDropzone = new Dropzone("#myDropzoneDiv", {
          url: "/upload",
          paramName: "file",
          method: "post",
          maxFiles: 1,
          uploadMultiple: false,
          maxFilesize: 2,                       // MB
          acceptedFiles: ".jpg,.jpeg,.png,.gif,.webp,.bmp,.tiff",
          addRemoveLinks: true,
          dictDefaultMessage: "Dosyayı buraya sürükleyin veya tıklayın",
          dictRemoveFile: "❌ Sil",
          autoProcessQueue: true,
          init: function () {

            this.on("sending", function (file, xhr, formData) {
              formData.append("folder", "Category");
              formData.append("id", String(@Model.Id));
              formData.append("overwrite", String(overwriteNext));
            });

            this.on("success", function (file, response) {
              overwriteNext = false;
              if (response && typeof response === "object" && typeof response.id === "number") {
                currentMediaId = response.id;
              }
              blockAdding();
            });

            this.on("error", function (file, errorMessage, xhr) {
              if (xhr && xhr.status === 409) {
                Swal.fire({
                  title: 'Üzerine yazılsın mı?',
                  text: 'Bu isimde bir dosya zaten var.',
                  icon: 'question',
                  showCancelButton: true,
                  confirmButtonText: 'Evet, üzerine yaz',
                  cancelButtonText: 'Vazgeç'
                }).then((r) => {
                  if (r.isConfirmed) {
                    overwriteNext = true;
                    file.status = Dropzone.QUEUED;
                    myDropzone.processFile(file);
                  } else {
                    overwriteNext = false;
                  }
                });
              } else {
                Swal.fire('Hata', 'Yükleme sırasında bir hata oluştu.', 'error');
              }
            });

            // Her eklenen dosyada önce Dropzone'un auto-remove özelliğini iptal et, sonra kendi onayını bağla
            this.on("addedfile", function (file) {
              neutralizeRemoveButton(file);
              attachConfirmToRemove(file);
            });

            // UI temizlik: dosya gerçekten kaldırıldıysa (onaylı akış) eklemeyi aç
            this.on("removedfile", function () {
              if (myDropzone.files.length === 0) {
                unblockAdding();
              }
            });
          }
        });

        // Dropzone'un default remove davranışını kapatır (kritik!)
        function neutralizeRemoveButton(file) {
          if (!file || !file.previewElement) return;
          // Önizlemede data-dz-remove taşıyan tüm elemanları bul ve attribute'u sök
          file.previewElement.querySelectorAll('[data-dz-remove]').forEach(function(el) {
            el.removeAttribute('data-dz-remove');
            // Güvenlik için default anchor davranışını da etkisizleştir
            if (el.tagName === 'A') el.setAttribute('href', 'javascript:void(0)');
          });
        }

        // Silme onayı: onaya göre server + dropzone kontrolü
        function attachConfirmToRemove(file) {
          setTimeout(function () {
            const btn = file.previewElement && file.previewElement.querySelector('.dz-remove');
            if (!btn || btn._confirmBound) return;

            // Capture fazında dinle ve tüm propagasyonu kes (ekstra emniyet)
            btn.addEventListener('click', function (e) {
              e.preventDefault();
              e.stopPropagation();
              e.stopImmediatePropagation();

              Swal.fire({
                title: 'Emin misiniz?',
                text: 'Bu resmi silmek istediğinize emin misiniz?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Evet, sil',
                cancelButtonText: 'Vazgeç',
                showLoaderOnConfirm: true,
                allowOutsideClick: () => !Swal.isLoading(),
                preConfirm: () => {
                  // ID yoksa sadece önizleme kaldıracağız (server'a gitmeyelim)
                  if (!currentMediaId || currentMediaId === 0) {
                    return Promise.resolve({ localOnly: true });
                  }
                  // ID varsa önce server'dan sil
                  return new Promise((resolve, reject) => {
                    $.ajax({
                      url: '/Media/Delete',
                      type: 'POST',
                      data: {
                        folder: 'Category',
                        id: @Model.Id,
                        mediaFolderId: currentMediaId
                      },
                      success: function () { resolve({ server: 'ok' }); },
                      error: function (xhr) { reject(xhr); }
                    });
                  });
                }
              }).then((result) => {
                if (!result.isConfirmed) {
                  // Vazgeçildi → hiçbir şey yapma, önizleme kalacak
                  return;
                }
                // Onaylandı → server ok ya da localOnly
                myDropzone.removeFile(file);
                currentMediaId = 0;
                unblockAdding();
                showCategoryImageMessage('Resim başarıyla silindi. Kategori bilgileri güncellendi.', 'success');
              }).catch(() => {
                showCategoryImageMessage('Silme sırasında bir hata oluştu.', 'danger');
              });
            }, true); // capture=true

            btn._confirmBound = true;
          }, 0);
        }

        // Yeni dosya eklemeyi kapat/aç
        function blockAdding(){
          if (myDropzone.hiddenFileInput) myDropzone.hiddenFileInput.disabled = true;
          myDropzone.element.classList.add("dz-has-file");
        }
        function unblockAdding(){
          if (myDropzone.hiddenFileInput) myDropzone.hiddenFileInput.disabled = false;
          myDropzone.element.classList.remove("dz-has-file");
        }

        // Mesaj helper
        function showCategoryImageMessage(text, type) {
          var container = document.querySelector('#form-tabs-image .card-body')
                       || document.querySelector('#form-tabs-image')
                       || document.body;

          var el = document.getElementById('categoryImageAlert');
          if (!el) {
            el = document.createElement('div');
            el.id = 'categoryImageAlert';
            el.role = 'alert';
            el.className = 'alert mt-3';
            container.prepend ? container.prepend(el) : container.appendChild(el);
          }
          el.className = 'alert mt-3 alert-' + (type || 'success');
          el.textContent = text;
          el.style.display = '';
          clearTimeout(el._hideTimer);
          el._hideTimer = setTimeout(function () { el.style.display = 'none'; }, 3000);
        }

        // Preload varsa göster; yoksa yükleme açık kalsın
        @if (Model.MediaFileId.HasValue && !string.IsNullOrEmpty(Model.MediaFileUrl))
        {
                  var encodedFileName = JavaScriptEncoder.Default.Encode(Model.MediaFileName ?? "");
                  var encodedFileUrl = JavaScriptEncoder.Default.Encode(Model.MediaFileUrl ?? "");
                  var fileSize = Model.MediaFileSize;
                  var mimeType = JavaScriptEncoder.Default.Encode(Model.MediaFile?.MimeType ?? "image/jpeg");

                <text>
                  (function preloadExisting(){
                    const mockFile = {
                      name: "@encodedFileName",
                      size: @fileSize,
                      type: "@mimeType",
                      accepted: true
                    };
                    myDropzone.emit("addedfile", mockFile);
                    myDropzone.emit("thumbnail", mockFile, "@encodedFileUrl");
                    myDropzone.emit("complete", mockFile);
                    myDropzone.files.push(mockFile);

                    neutralizeRemoveButton(mockFile);
                    attachConfirmToRemove(mockFile);
                    blockAdding();
                  })();
                </text>
        }
        else
        {
                <text>
                  (function ensureUploadEnabled(){ unblockAdding(); })();
                </text>
        }
    </script>
    <script>
        $('#btnDeleteCategory').on('click', function () {
          const categoryId = $(this).data('id');

          Swal.fire({
            title: 'Silme Türünü Seçin',
            html: `
              <div style="text-align: left">
                <label><input type="radio" name="delete-option" value="0" checked> Sadece bağlantıyı kaldır</label><br>
                <label><input type="radio" name="delete-option" value="1"> Bağlantı ve alt kategorileri sil</label>
              </div>
            `,
            showCancelButton: true,
            confirmButtonText: 'Devam Et',
            cancelButtonText: 'İptal',
            customClass: {
              confirmButton: 'btn btn-danger me-3',
              cancelButton: 'btn btn-secondary'
            },
            buttonsStyling: false,
            preConfirm: () => {
              const selected = document.querySelector('input[name="delete-option"]:checked');
              if (!selected) {
                Swal.showValidationMessage('Lütfen bir seçenek seçin.');
                return false;
              }
              return selected.value;
            }
          }).then((result) => {
            if (result.isConfirmed) {
              const chooseType = parseInt(result.value);

              $.ajax({
                url: '@Url.Action("Delete", "Category")',
                type: 'POST',
                data: {
                  id: categoryId,
                  chooseType: chooseType
                },
                success: function (response) {
                  if (response.success) {
                    Swal.fire({
                      icon: 'success',
                      title: 'Silindi!',
                      text: 'Kategori başarıyla silindi.',
                      confirmButtonText: 'Tamam',
                      customClass: {
                        confirmButton: 'btn btn-success'
                      },
                      buttonsStyling: false
                    }).then(() => {
                      window.location.href = '@Url.Action("List", "Category")';
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Hata!',
                      text: response.message || 'Silme işlemi başarısız oldu.',
                      confirmButtonText: 'Tamam',
                      customClass: {
                        confirmButton: 'btn btn-danger'
                      },
                      buttonsStyling: false
                    });
                  }
                },
                error: function () {
                  Swal.fire({
                    icon: 'error',
                    title: 'Sunucu Hatası!',
                    text: 'İstek gönderilirken bir hata oluştu.',
                    confirmButtonText: 'Tamam',
                    customClass: {
                      confirmButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                  });
                }
              });
            }
          });
        });
    </script>



    @* <script>
     
        $('#btnDeleteCategory').on('click', function () {
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Bu kategori silinecek!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Evet, sil!',
                cancelButtonText: 'İptal',
                customClass: {
                    confirmButton: 'btn btn-danger me-3',
                    cancelButton: 'btn btn-secondary'
                },
                buttonsStyling: false
            }).then((result) => {
                if (result.isConfirmed) {
                    var categoryId = '@Model.Id';

                    $.ajax({
                        url: '@Url.Action("Delete", "Category")',
                        type: 'POST',
                        data: { id: categoryId },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Silindi!',
                                    text: 'Kategori başarıyla silindi.',
                                    confirmButtonText: 'Tamam',
                                    customClass: {
                                        confirmButton: 'btn btn-success'
                                    },
                                    buttonsStyling: false
                                }).then(() => {
                                    window.location.href = '@Url.Action("List", "Category")';
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Hata!',
                                    text: response.message || 'Silme işlemi başarısız oldu.',
                                    confirmButtonText: 'Tamam',
                                    customClass: {
                                        confirmButton: 'btn btn-danger'
                                    },
                                    buttonsStyling: false
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                icon: 'error',
                                title: 'Hata!',
                                text: 'Sunucu ile bağlantı kurulamadı.',
                                confirmButtonText: 'Tamam',
                                customClass: {
                                    confirmButton: 'btn btn-danger'
                                },
                                buttonsStyling: false
                            });
                        }
                    });
                }
            });
        });
    </script> *@

    <script>

        const formValidation = FormValidation.formValidation(
            document.getElementById('category-form'),
            {
                locale: 'tr_TR',
                localization: FormValidation.locales.tr_TR,
                fields: {
                    'Name': {
                        validators: {
                            notEmpty: {
                                message: 'Kategori adı boş bırakılamaz.'
                            },
                            stringLength: {
                                min: 3,
                                message: 'Kategori adı en az 3 karakter olmalıdır.'
                            }
                        }
                    },
                    'DisplayOrder': {
                        validators: {
                            notEmpty: {
                                message: 'Sıra boş bırakılamaz.'
                            },
                            numeric: {
                                message: 'Sıra sadece sayı olmalıdır.'
                            }
                        }
                    }
                },
                plugins: {
                    trigger: new FormValidation.plugins.Trigger(),
                    bootstrap5: new FormValidation.plugins.Bootstrap5({
                        eleValidClass: '',
                        rowSelector: '.row'  // senin markupta row kullanılıyor
                    }),
                    submitButton: new FormValidation.plugins.SubmitButton(),
                    autoFocus: new FormValidation.plugins.AutoFocus()
                },
                init: instance => {
                    instance.on('plugins.message.placed', function (e) {
                        if (e.element.parentElement.classList.contains('input-group')) {
                            e.element.parentElement.insertAdjacentElement('afterend', e.messageElement);
                        }
                    });

                    instance.on('core.form.valid', function () {
                        const $form = $('#category-form');
                        const serializedData = $form.serialize();

                        $.ajax({
                            url: '@Url.Action("Edit", "Category")',
                            type: 'POST',
                            data: serializedData,
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire({
                                        title: 'Başarılı!',
                                        text: 'Değişiklikler başarıyla kaydedildi.',
                                        icon: 'success',
                                        confirmButtonText: 'Tamam',
                                        customClass: {
                                            confirmButton: 'btn btn-success'
                                        },
                                        buttonsStyling: false
                                    }).then(() => {
                                        window.location.href = '@Url.Action("List", "Category")';
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Hata!',
                                        text: response.message || 'Bir hata oluştu.',
                                        icon: 'error',
                                        confirmButtonText: 'Tamam',
                                        customClass: {
                                            confirmButton: 'btn btn-danger'
                                        },
                                        buttonsStyling: false
                                    });
                                }
                            },
                            error: function (xhr) {
                                Swal.fire({
                                    title: 'Hata!',
                                    text: xhr.responseText || 'İşlem sırasında bir hata oluştu.',
                                    icon: 'error',
                                    confirmButtonText: 'Tamam',
                                    customClass: {
                                        confirmButton: 'btn btn-danger'
                                    },
                                    buttonsStyling: false
                                });
                            }
                        });
                    });

                }
            }
        );

    </script>


    <script>
        $(function () {
          const $cat = $('#ParentCategoryId');
          // Taşma/overlay sorunlarına karşı güvenli kapsayıcı
          if ($cat.parent().css('position') !== 'relative') {
            $cat.wrap('<div class="position-relative"></div>');
          }

          $cat.select2({
            width: '100%',
            placeholder: 'Kategori seçiniz',
            allowClear: true,
            dropdownParent: $cat.parent(),
            minimumInputLength: 0,     // istersen 2 yap
            language: {
              inputTooShort: () => 'Daha fazla karakter yazın',
              searching:     () => 'Aranıyor...',
              noResults:     () => 'Sonuç bulunamadı'
            },
            ajax: {
              url: '@Url.Action("AllCategory", "Category")', // was: AllCateogry
              type: 'POST',
              dataType: 'json',
              delay: 250,
              data: function (params) {
                return {
                  term: params.term || '',
                  page: params.page || 1
                };
              },
              headers: {
                // Antiforgery kullanıyorsan yorumu kaldır:
                // 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
              },
              processResults: function (data, params) {
                params.page = params.page || 1;

                // Sunucu zaten { results:[{id,text}], pagination:{ more } } dönüyor
                // Yine de korumalı döndür.
                return {
                  results: Array.isArray(data.results) ? data.results : [],
                  pagination: { more: !!(data.pagination && data.pagination.more) }
                };
              },
              cache: true
            },
            // Görünüm özelleştirme istersen:
            templateResult: function (item) { return item.text || ''; },
            templateSelection: function (item) { return item.text || ''; },
            escapeMarkup: function (m) { return m; } // templateResult HTML kullanacaksan kalsın
          });
        });
    </script>

}
