@model CategoryViewModel
@{
    ViewData["Title"] = "Yeni Bir Kategori Ekle";
}

<form asp-action="Create" id="category-form">
    <div class="container-fluid flex-grow-1 container-p-y">
        <h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light">Ürün Yönetimi/</span><span class="text-muted fw-light">Kategoriler/</span> Yeni Bir Kategori Ekle</h4>

        <div class="row">
            <partial name="_CreateOrUpdate" model="Model" />
            <div class="col-lg-3 col-12 invoice-actions">
                <div class="card mb-4">
                    <div class="card-body">
                        <button type="submit" id="save-btn" class="btn btn-primary d-grid w-100 mb-2 waves-effect waves-light">
                            <span class="d-flex align-items-center justify-content-center text-nowrap"><i class="ti ti-check ti-xs me-1"></i>Kaydet</span>
                        </button>
                        <a href="@Url.Action("List")" class="btn btn-label-secondary d-grid w-100 waves-effect">Vazgeç</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>



@section scripts {

    <script data-origin="FileUploader">
        $(function () {
            // Init dropzone
            $("#MediaUpload").dropzoneWrapper({
                onUploading: null,
                onUploadCompleted: null,
                onAborted: null,
                onError: null,
                onFileRemove: null,
                onCompleted: null,
                onMediaSelected: null,
                maxFiles: 1,
                maxFilesSize: 102400,
                timeout: 300000,
                clickableElement: null,
                previewContainerId: "",
                showRemoveButton: true,
                showRemoveButtonAfterUpload: true,
                downloadEnabled: false
            });
        });
    </script>
    <script>
        const formValidation = FormValidation.formValidation(
            document.getElementById('category-form'),
            {
                locale: 'tr_TR',
                localization: FormValidation.locales.tr_TR,
                fields: {
                    'Name': {
                        validators: {
                            notEmpty: {
                                message: 'Kategori adı boş bırakılamaz.'
                            },
                            stringLength: {
                                min: 3,
                                message: 'Kategori adı en az 3 karakter olmalıdır.'
                            }
                        }
                    },
                    'DisplayOrder': {
                        validators: {
                            notEmpty: {
                                message: 'Sıra boş bırakılamaz.'
                            },
                            numeric: {
                                message: 'Sıra sadece sayı olmalıdır.'
                            }
                        }
                    }
                },
                plugins: {
                    trigger: new FormValidation.plugins.Trigger(),
                    bootstrap5: new FormValidation.plugins.Bootstrap5({
                        eleValidClass: '',
                        rowSelector: '.mb-3'  // senin formdaki hata mesaj yerleri için
                    }),
                    submitButton: new FormValidation.plugins.SubmitButton(),
                    autoFocus: new FormValidation.plugins.AutoFocus()
                },
                init: instance => {
                    instance.on('plugins.message.placed', function (e) {
                        if (e.element.parentElement.classList.contains('input-group')) {
                            e.element.parentElement.insertAdjacentElement('afterend', e.messageElement);
                        }
                    });

                    instance.on('core.form.valid', function () {
                        const $form = $('#category-form');
                        const serializedData = $form.serialize();

                        $.ajax({
                            url: '@Url.Action("Create", "Category")',
                            type: 'POST',
                            data: serializedData,
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire({
                                        title: 'Başarılı!',
                                        text: 'Kategori başarıyla kaydedildi.',
                                        icon: 'success',
                                        confirmButtonText: 'Tamam',
                                        customClass: {
                                            confirmButton: 'btn btn-success'
                                        },
                                        buttonsStyling: false
                                    }).then(() => {
                                        window.location.href = '@Url.Action("List", "Category")';
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Hata!',
                                        text: response.message || 'Bir hata oluştu.',
                                        icon: 'error',
                                        confirmButtonText: 'Tamam',
                                        customClass: {
                                            confirmButton: 'btn btn-danger'
                                        },
                                        buttonsStyling: false
                                    });
                                }
                            },
                            error: function (xhr) {
                                Swal.fire({
                                    title: 'Hata!',
                                    text: xhr.responseText || 'İşlem sırasında bir hata oluştu.',
                                    icon: 'error',
                                    confirmButtonText: 'Tamam',
                                    customClass: {
                                        confirmButton: 'btn btn-danger'
                                    },
                                    buttonsStyling: false
                                });
                            }
                        });
                    });

                    // ParentCategoryId validasyonu kaldırıldığı için burası da çıkarıldı
                }
            }
        );

        // Eğer ParentCategoryId için Select2 kullanımı devam edecekse aşağıdaki kodu tutabilirsiniz.
        // Yoksa komple bu kısmı da kaldırabilirsiniz.
                $('#ParentCategoryId').wrap('<div class="position-relative"></div>').select2({
          dropdownParent: $('#ParentCategoryId').parent(),
          width: '100%',
          placeholder: 'Kategori Seçin',
          allowClear: true,
          ajax: {
            url: '@Url.Action("AllCategory", "Category")',
            type: 'POST',
            dataType: 'json',
            delay: 250,
            data: function (params) {
              return {
                term: params.term || '',
                page: params.page || 1
              };
            },
            processResults: function (data, params) {
              params.page = params.page || 1;
              return data; // {results:[{id,text}], pagination:{more}}
            }
          }
        });
    </script>


}


