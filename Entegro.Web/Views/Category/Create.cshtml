@model CategoryViewModel
@{
    ViewData["Title"] = "Yeni Bir Kategori Ekle";
}

<form asp-action="Create" id="category-form">
    <div class="container-fluid flex-grow-1 container-p-y">
        <h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light">Ürün Yönetimi/</span><span class="text-muted fw-light">Kategoriler/</span> Yeni Bir Kategori Ekle</h4>

        <div class="row">
            <partial name="_CreateOrUpdate" model="Model" />
            <div class="col-lg-3 col-12 invoice-actions">
                <div class="card mb-4">
                    <div class="card-body">
                        <button type="submit" id="save-btn" class="btn btn-primary d-grid w-100 mb-2 waves-effect waves-light">
                            <span class="d-flex align-items-center justify-content-center text-nowrap"><i class="ti ti-check ti-xs me-1"></i>Kaydet</span>
                        </button>
                        <a href="@Url.Action("List")" class="btn btn-label-secondary d-grid w-100 waves-effect">Vazgeç</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>



@section scripts {
    <script src="~/assets/vendor/libs/formvalidation/dist/js/FormValidation.min.js"></script>
    <script src="~/assets/vendor/libs/formvalidation/dist/js/plugins/Bootstrap5.min.js"></script>
    <script src="~/assets/vendor/libs/formvalidation/dist/js/plugins/AutoFocus.min.js"></script>
    <script src="~/assets/vendor/libs/formvalidation/dist/js/locales/tr_tr.js"></script>

    <script>
        const formValidation = FormValidation.formValidation(
            document.getElementById('category-form'),
            {
                locale: 'tr_TR',
                localization: FormValidation.locales.tr_TR,
                fields: {
                    'ParentCategoryId': {
                        validators: {
                            notEmpty: {
                                message: 'Kategori seçmek zorunludur.'
                            }
                        }
                    },
                    'Name': {
                        validators: {
                            notEmpty: {
                                message: 'Kategori adı boş bırakılamaz.'
                            },
                            stringLength: {
                                min: 3,
                                message: 'Kategori adı en az 3 karakter olmalıdır.'
                            }
                        }
                    },
                    'DisplayOrder': {
                        validators: {
                            notEmpty: {
                                message: 'Sıra boş bırakılamaz.'
                            },
                            numeric: {
                                message: 'Sıra sadece sayı olmalıdır.'
                            }
                        }
                    }
                },
                plugins: {
                    trigger: new FormValidation.plugins.Trigger(),
                    bootstrap5: new FormValidation.plugins.Bootstrap5({
                        eleValidClass: '',
                        rowSelector: '.mb-3'
                    }),
                    submitButton: new FormValidation.plugins.SubmitButton(),
                    autoFocus: new FormValidation.plugins.AutoFocus()
                },
                init: instance => {
                    instance.on('plugins.message.placed', function (e) {
                        if (e.element.parentElement.classList.contains('input-group')) {
                            e.element.parentElement.insertAdjacentElement('afterend', e.messageElement);
                        }
                    });

                    instance.on('core.form.valid', function () {
                        const formElement = document.getElementById('category-form');
                        const formData = new FormData(formElement);

                        // FormData'yı düz JS objesine çeviriyoruz
                        const data = {};
                        formData.forEach((value, key) => {
                            data[key] = value;
                        });

                        // AJAX POST
                        $.ajax({
                            url: '@Url.Action("Create", "Category")',
                            method: 'POST',
                            data: data,
                            success: function (response) {
                                if (response.success) {
                                    alert('Kategori başarıyla kaydedildi.');
                                    window.location.href = '@Url.Action("List", "Category")';
                                } else {
                                    alert('Bir hata oluştu: ' + response.message);
                                }
                            },
                            error: function (xhr) {
                                alert(xhr.responseText || 'İşlem sırasında bir hata oluştu.');
                            }
                        });
                    });
                }
            }
        );

        // Select2 Ayarı
        $('#ParentCategoryId').wrap('<div class="position-relative"></div>').select2({
            dropdownParent: $('#ParentCategoryId').parent(),
            ajax: {
                url: '@Url.Action("AllCateogry", "Category")',
                type: "POST",
                dataType: 'json',
                data: function (params) {
                    return {
                        search: params.term,
                        page: params.page || 1
                    };
                }
            }
        });
    </script>
}

