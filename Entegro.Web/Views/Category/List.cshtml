@{
    ViewData["Title"] = "Kategoriler";
}

<div class="flex-grow-1 container-p-y container-fluid">
    <div class="card">
        <div class="card-header border-bottom">
            <h5 class="card-title mb-0">Kategoriler</h5>
            <div class="d-flex justify-content-between align-items-center row pt-4 gap-6 gap-md-0 g-md-6">
                <div class="col-md-4 categoryFilterParent"></div>
            </div>
        </div>

        <div class="card-datatable">
            <table id="CategoryTable" class="table">
                <thead class="border-top">
                    <tr>
                        <th></th>
                        <th></th>
                        <th>Id</th> <!-- gizli, backend için -->
                        <th>Kategori adı</th>
                        <th>Görüntüleme sırası</th>
                        <th>Kayıt tarihi</th>
                        <th></th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
                $(function() {
            const table = $('#CategoryTable').DataTable({
                language: {
                    paginate: {
                        next: '<i class="icon-base ti ti-chevron-right scaleX-n1-rtl icon-18px"></i>',
                        previous: '<i class="icon-base ti ti-chevron-left scaleX-n1-rtl icon-18px"></i>',
                        first: '<i class="icon-base ti ti-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                        last: '<i class="icon-base ti ti-chevrons-right scaleX-n1-rtl icon-18px"></i>'
                    },
                    url: '//cdn.datatables.net/plug-ins/2.3.2/i18n/tr.json',
                },
                serverSide: true,
                ajax: {
                    url: '/Category/CategoryList',
                    type: 'POST',
                    contentType: 'application/json',
                    data: function(d) {
                        return JSON.stringify(d);
                    }
                },
                // Id (hidden), ParentCategoryId (hidden) beklenebilir
                columns: [{
                        data: 'Id'
                    }, // 0: control
                    {
                        data: 'Id',
                        orderable: false,
                        render: DataTable.render.select()
                    }, // 1: checkbox
                    {
                        data: 'Id',
                        visible: false
                    }, // 2: hidden Id (export vb. için)
                    {
                        data: 'Name'
                    }, // 3: Kategori adı
                    {
                        data: 'DisplayOrder'
                    }, // 4: Görüntüleme sırası
                    { // 5: Kayıt tarihi
                        data: 'CreatedOn',
                        render: function(data, type) {
                            if (type === "sort" || type === "type") return data;
                            return moment(data).format("DD.MM.yyyy HH:mm");
                        }
                    },
                    {
                        data: 'Id'
                    } // 6: İşlemler
                ],
                columnDefs: [{
                        className: "control",
                        searchable: false,
                        orderable: false,
                        responsivePriority: 2,
                        targets: 0,
                        render: () => ""
                    },
                    {
                        targets: 1,
                        orderable: false,
                        searchable: false,
                        responsivePriority: 3,
                        checkboxes: {
                            selectAllRender: '<input type="checkbox" class="form-check-input">'
                        },
                        render: () => '<input type="checkbox" class="dt-checkboxes form-check-input">'
                    },
                    {
                        targets: 3,
                        responsivePriority: 1,
                        render: (data, type, row) => {
                            const image = row.MediaFile == null ? '' : `<img src="${row.MediaFile.Url}" class="rounded">`;

                            return `<div class="d-flex justify-content-start align-items-center product-name">
                                 <div class="avatar-wrapper">
                                     <div class="avatar me-2 me-sm-4 rounded-2 bg-label-secondary">
                                         ${image}
                                     </div>
                                 </div>
                                 <div class="d-flex flex-column">
                                     <h6 class="text-nowrap mb-0">${row.Name}</h6>
                                     ${row.ParentName ? `<small class="text-muted d-none d-sm-block">Üst: ${row.ParentName}</small>` : ""}
                                 </div>
                             </div>`;
                        }
                    },
                    {
                        targets: -1,
                        title: "İşlemler",
                        searchable: false,
                        orderable: false,
                        render: (data, type, row) => `
                  <div class="d-inline-block text-nowrap">
                    <a href="Edit?id=${row.Id}" class="btn btn-text-secondary rounded-pill waves-effect btn-icon" title="Düzenle">
                      <i class="icon-base ti ti-pencil icon-22px"></i>
                    </a>
                    <button class="btn btn-text-secondary rounded-pill waves-effect btn-icon dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                      <i class="icon-base ti ti-dots-vertical icon-22px"></i>
                    </button>
                    <div class="dropdown-menu dropdown-menu-end m-0">
                      <a href="Details?id=${row.Id}" class="dropdown-item">Detaylar</a>
                      <a href="Archive?id=${row.Id}" class="dropdown-item">Arşiv</a>
                      <div class="dropdown-divider"></div>
                      <a href="javascript:void(0);" class="dropdown-item text-danger delete-record" data-id="${row.Id}">Kategori Sil</a>
                    </div>
                  </div>`
                    }
                ],
                select: {
                    style: "multi",
                    selector: "td:nth-child(2)"
                },
                order: [
                    [3, "asc"]
                ], // Kategori adına göre sıralama
                displayLength: 10,
                layout: {
                    topStart: {
                        rowClass: "card-header d-flex border-top rounded-0 flex-wrap py-0 flex-column flex-md-row align-items-start",
                        features: [{
                            search: {
                                className: "me-5 ms-n4 pe-5 mb-n6 mb-md-0",
                                placeholder: "Ara..",
                                text: "_INPUT_"
                            }
                        }]
                    },
                    topEnd: {
                        rowClass: "row m-3 my-0 justify-content-between",
                        features: [{
                            pageLength: {
                                menu: [7, 10, 25, 50, 100],
                                text: "_MENU_"
                            },
                            buttons: [{
                                    extend: "collection",
                                    className: "btn btn-label-secondary dropdown-toggle me-4",
                                    text: `<span class="d-flex align-items-center gap-1">
                                <i class="icon-base ti ti-upload icon-xs"></i>
                                <span class="d-none d-sm-inline-block">Dışarı Aktar</span>
                              </span>`,
                                    buttons: [{
                                            extend: "print",
                                            className: "dropdown-item",
                                            text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-printer me-1"></i> Print</span>`,
                                            exportOptions: {
                                                columns: [3, 4, 5]
                                            }
                                        },
                                        {
                                            extend: "csv",
                                            className: "dropdown-item",
                                            text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-file me-1"></i> Csv</span>`,
                                            exportOptions: {
                                                columns: [3, 4, 5]
                                            }
                                        },
                                        {
                                            extend: "excel",
                                            className: "dropdown-item",
                                            text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-upload me-1"></i> Excel</span>`,
                                            exportOptions: {
                                                columns: [3, 4, 5]
                                            }
                                        },
                                        {
                                            extend: "pdf",
                                            className: "dropdown-item",
                                            text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-file-text me-1"></i> Pdf</span>`,
                                            exportOptions: {
                                                columns: [3, 4, 5]
                                            }
                                        },
                                        {
                                            extend: "copy",
                                            className: "dropdown-item",
                                            text: `<i class="icon-base ti tabler-copy me-1"></i> Copy`,
                                            exportOptions: {
                                                columns: [3, 4, 5]
                                            }
                                        }
                                    ]
                                },
                                {
                                    text: `<i class="icon-base ti ti-plus me-0 me-sm-1 icon-16px"></i>
                               <span class="d-none d-sm-inline-block">Yeni Ekle</span>`,
                                    className: "add-new btn btn-primary",
                                    action: function() {
                                        window.location.href = "Create";
                                    }
                                }
                            ]
                        }]
                    },
                    bottomStart: {
                        rowClass: "row mx-3 justify-content-between",
                        features: ["info"]
                    },
                    bottomEnd: "paging"
                },
                initComplete: function() {
                    const api = this.api();

                    // ParentCategoryId gizli kolona göre dropdown filtre (opsiyonel)
                    // Backend CategoryList response'unda ParentCategoryId ve ParentName varsa çalışır
                    // map dizisini kendi Parent listene göre doldur.
                    const parentMap = [
                        // { id: 0, title: "Kök" },
                        // { id: 12, title: "Elektronik" },
                    ];

                    // Eğer ParentCategoryId'yi response'a ekliyorsan, şu kolonu da ekle:
                    // api.column(2) şu an Id; ParentCategoryId yoksa aşağıyı yoruma al.
                    addFilterDropdown(api.column(2), ".categoryFilterParent", "Üst Kategori", parentMap);
                }
            });

            // Görsel sınıf ayarları (buton, arama, sayfa uzunluğu vs.) düzeltmeleri
            setTimeout(() => {
                const adjustments = [{
                        selector: ".dt-buttons .btn",
                        classToRemove: "btn-secondary"
                    },
                    {
                        selector: ".dt-buttons.btn-group",
                        classToAdd: "mb-md-0 mb-6"
                    },
                    {
                        selector: ".dt-search .form-control",
                        classToRemove: "form-control-sm",
                        classToAdd: "ms-0"
                    },
                    {
                        selector: ".dt-search",
                        classToAdd: "mb-0 mb-md-6"
                    },
                    {
                        selector: ".dt-length .form-select",
                        classToRemove: "form-select-sm"
                    },
                    {
                        selector: ".dt-layout-end",
                        classToAdd: "gap-md-2 gap-0 mt-0"
                    },
                    {
                        selector: ".dt-layout-start",
                        classToAdd: "mt-0"
                    },
                    {
                        selector: ".dt-layout-table",
                        classToRemove: "row mt-2"
                    },
                    {
                        selector: ".dt-layout-full",
                        classToRemove: "col-md col-12",
                        classToAdd: "table-responsive"
                    }
                ];
                adjustments.forEach(({
                    selector,
                    classToRemove,
                    classToAdd
                }) => {
                    document.querySelectorAll(selector).forEach(el => {
                        if (classToRemove) classToRemove.split(" ").forEach(cls => el.classList.remove(cls));
                        if (classToAdd) classToAdd.split(" ").forEach(cls => el.classList.add(cls));
                    });
                });
            }, 100);

            // Silme iş akışı (SweetAlert) – mevcut mantığını korudum
            $(document).on('click', '.delete-record', function() {
                var categoryId = $(this).data('id');

                Swal.fire({
                    title: 'Silme Türünü Seçin',
                    html: `
                <div style="text-align: left">
                  <label><input type="radio" name="delete-option" value="0" checked> Sadece bağlantıyı kaldır</label><br>
                  <label><input type="radio" name="delete-option" value="1"> Bağlantı ve alt kategorileri sil</label>
                </div>`,
                    showCancelButton: true,
                    confirmButtonText: 'Devam Et',
                    cancelButtonText: 'İptal',
                    customClass: {
                        confirmButton: 'btn btn-danger me-3',
                        cancelButton: 'btn btn-secondary'
                    },
                    buttonsStyling: false,
                    preConfirm: () => {
                        const selected = document.querySelector('input[name="delete-option"]:checked');
                        if (!selected) {
                            Swal.showValidationMessage('Lütfen bir seçenek seçin.');
                            return false;
                        }
                        return selected.value;
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        const chooseType = parseInt(result.value);
                        $.ajax({
                            url: '@Url.Action("Delete", "Category")',
                            type: 'POST',
                            data: {
                                id: categoryId,
                                chooseType: chooseType
                            },
                            success: function(response) {
                                if (response.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Silindi!',
                                        text: 'Kategori başarıyla silindi.',
                                        confirmButtonText: 'Tamam',
                                        customClass: {
                                            confirmButton: 'btn btn-success'
                                        },
                                        buttonsStyling: false
                                    }).then(() => {
                                        table.ajax.reload(null, false);
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Hata!',
                                        text: response.message || 'Silme işlemi başarısız oldu.',
                                        confirmButtonText: 'Tamam',
                                        customClass: {
                                            confirmButton: 'btn btn-danger'
                                        },
                                        buttonsStyling: false
                                    });
                                }
                            },
                            error: function() {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Sunucu Hatası!',
                                    text: 'İstek gönderilirken bir hata oluştu.',
                                    confirmButtonText: 'Tamam',
                                    customClass: {
                                        confirmButton: 'btn btn-danger'
                                    },
                                    buttonsStyling: false
                                });
                            }
                        });
                    }
                });
            });

            // Ortak: dropdown filtre yardımcı fonksiyonu (opsiyonel)
            function addFilterDropdown(column, containerSelector, placeholder, map) {
                let select = document.createElement("select");
                select.className = "form-select text-capitalize";
                select.innerHTML = `<option value="">${placeholder}</option>`;
                document.querySelector(containerSelector).appendChild(select);

                select.addEventListener("change", function() {
                    const val = select.value ? `^${select.value}$` : "";
                    column.search(val, true, false).draw();
                });

                column.data().unique().sort().each(function(value) {
                    const item = map.find(x => x.id === value);
                    if (item) {
                        let option = document.createElement("option");
                        option.value = item.id;
                        option.textContent = item.title;
                        select.appendChild(option);
                    }
                });
            }
        });
    </script>
}
