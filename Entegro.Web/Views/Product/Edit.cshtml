@model ProductViewModel
@{
    ViewData["Title"] = "Edit";
}
<form asp-action="Edit" id="product-form">
    <div class="container-fluid flex-grow-1 container-p-y">
        <h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light">Ürün Yönetimi /</span><span class="text-muted fw-light"> Ürünler /</span> Ürünü Bilgilerini Düzenle</h4>

        <div class="row">
            <partial name="_CreateOrUpdate" />
            <div class="col-lg-3 col-12 invoice-actions">
                <div class="card mb-4">
                    <div class="card-body">
                        <button type="submit" class="btn btn-primary d-grid w-100 mb-2 waves-effect waves-light">
                            <span class="d-flex align-items-center justify-content-center text-nowrap"><i class="ti ti-check ti-xs me-1"></i>Kaydet</span>
                        </button>
                        @if (Model.Id > 0)
                        {
                            <button type="button" id="btnDeleteProduct" class="btn btn-danger d-grid w-100 mb-2 waves-effect waves-light">
                                <span class="d-flex align-items-center justify-content-center text-nowrap">
                                    <i class="ti ti-trash ti-xs me-1"></i>Sil
                                </span>
                            </button>
                        }
                        <a href="@Url.Action("List")" class="btn btn-label-secondary d-grid w-100 waves-effect">
                            <span class="d-flex align-items-center justify-content-center text-nowrap"><i class="ti ti-cancel ti-xs me-1"></i>Vazgeç</span>
                        </a>
                    </div>
                </div>
            </div>
        </div>

    </div>
</form>


@section Scripts {
    <link rel="stylesheet" href="~/assets/vendor/libs/quill/typography.css" />
    <link rel="stylesheet" href="~/assets/vendor/libs/quill/katex.css" />
    <link rel="stylesheet" href="~/assets/vendor/libs/quill/editor.css" />
    <script src="/assets/vendor/libs/quill/katex.js"></script>
    <script src="/assets/vendor/libs/quill/quill.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-serializeJSON/3.2.0/jquery.serializejson.min.js"></script>
    <script src="/assets/vendor/libs/jquery-repeater/jquery-repeater.js"></script>

    <!-- Page JS -->
    <script data-origin="FileUploader">
        $(function () {
            // Init dropzone
            $("#upload-1388498530").dropzoneWrapper({
                onUploading: null,
                onUploadCompleted: null,
                onAborted: null,
                onError: null,
                onFileRemove: null,
                onCompleted: null,
                onMediaSelected: null,
                maxFiles: 500,
                maxFilesSize: 102400,
                timeout: 300000,
                clickableElement: null,
                previewContainerId: "preview-106864758",
                showRemoveButton: false,
                showRemoveButtonAfterUpload: true,
                downloadEnabled: false
            });
        });
    </script>
    <script>
        function focusFieldAndShowTab(el) {
            if (!el) return;
            const tabPane = el.closest('.tab-pane');
            if (tabPane) {
                const tabId = tabPane.id;
                const trigger = document.querySelector(`[data-bs-target="#${tabId}"]`);
                if (trigger) new bootstrap.Tab(trigger).show();
            }
            setTimeout(() => {
                try { el.focus({ preventScroll: true }); } catch (_) {}
                el.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 50);
        }

        let fullEditor;

        document.addEventListener("DOMContentLoaded", function () {
            const fullToolbar = [
                [{ font: [] }, { size: [] }],
                ['bold', 'italic', 'underline', 'strike'],
                [{ color: [] }, { background: [] }],
                [{ script: 'super' }, { script: 'sub' }],
                [{ header: '1' }, { header: '2' }, 'blockquote', 'code-block'],
                [{ list: 'ordered' }, { list: 'bullet' }, { indent: '-1' }, { indent: '+1' }],
                [{ direction: 'rtl' }],
                ['link', 'image', 'video', 'formula'],
                ['clean']
            ];

            fullEditor = new Quill('#full-editor', {
                bounds: '#full-editor',
                placeholder: 'Açıklama Giriniz...',
                modules: {
                    formula: true,
                    toolbar: fullToolbar
                },
                theme: 'snow'
            });

            const initialDesc = document.getElementById('Description');
            if (initialDesc && initialDesc.value) {
                fullEditor.root.innerHTML = initialDesc.value;
            }

            const formValidation = FormValidation.formValidation(
                document.getElementById('product-form'),
                {
                    locale: 'tr_TR',
                    localization: FormValidation.locales.tr_TR,
                    fields: {
                        'Name': {
                            validators: {
                                notEmpty: { message: 'Ürün adı boş bırakılamaz.' },
                                stringLength: { min: 3, message: 'Ürün adı en az 3 karakter olmalıdır.' }
                            }
                        },
                        'Code': {
                            validators: {
                                notEmpty: { message: 'Ürün kodu boş bırakılamaz.' }
                            }
                        },
                        'Price': {
                           selector: 'input[name$="[Price]"]',
                            validators: {
                                notEmpty: { message: 'Fiyat boş bırakılamaz.' },
                                numeric: { message: 'Fiyat yalnızca sayı olabilir.' }
                            }
                        },
                        'Currency': {
                            validators: { notEmpty: { message: 'Para birimi seçilmelidir.' } }
                        },
                        'StockQuantity': {
                            validators: {
                                notEmpty: { message: 'Stok miktarı boş bırakılamaz.' },
                                integer: { message: 'Stok miktarı tam sayı olmalıdır.' }
                            }
                        },
                        'Weight': {
                            validators: {
                                notEmpty: { message: 'Ağırlık boş bırakılamaz.' },
                                numeric: { message: 'Ağırlık geçerli bir sayı olmalıdır.' }
                            }
                        },
                        'Length': {
                            validators: {
                                notEmpty: { message: 'Uzunluk boş bırakılamaz.' },
                                numeric: { message: 'Uzunluk geçerli bir sayı olmalıdır.' }
                            }
                        },
                        'Width': {
                            validators: {
                                notEmpty: { message: 'Genişlik boş bırakılamaz.' },
                                numeric: { message: 'Genişlik geçerli bir sayı olmalıdır.' }
                            }
                        },
                        'Height': {
                            validators: {
                                notEmpty: { message: 'Yükseklik boş bırakılamaz.' },
                                numeric: { message: 'Yükseklik geçerli bir sayı olmalıdır.' }
                            }
                        },
                        'VatRate': {
                            validators: {
                                callback: {
                                    message: 'KDV oranı seçilmelidir.',
                                    callback: function (input) {
                                        const vatInc = document.getElementById('VatInc').checked;
                                        return !vatInc || (input.value !== '');
                                    }
                                }
                            }
                        },
                        'Barcode': {
                            validators: {
                                stringLength: { max: 100, message: 'Barkod en fazla 100 karakter olabilir.' }
                            }
                        },
                        'MetaTitle': {
                            validators: {
                                stringLength: { max: 60, message: 'Meta başlık en fazla 60 karakter olabilir.' }
                            }
                        },
                        'MetaKeywords': {
                            validators: {
                                stringLength: { max: 150, message: 'Anahtar kelimeler en fazla 150 karakter olabilir.' }
                            }
                        },
                        'MetaDescription': {
                            validators: {
                                stringLength: { max: 160, message: 'Meta açıklama en fazla 160 karakter olabilir.' }
                            }
                        }
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger(),
                        bootstrap5: new FormValidation.plugins.Bootstrap5({
                            eleValidClass: '',
                            rowSelector: '.mb-3'
                        }),
                        submitButton: new FormValidation.plugins.SubmitButton(),
                        autoFocus: new FormValidation.plugins.AutoFocus()
                    },
                    init: (instance) => {
                        instance.on('plugins.message.placed', function (e) {
                            if (e.element.parentElement.classList.contains('input-group')) {
                                e.element.parentElement.insertAdjacentElement('afterend', e.messageElement);
                            }
                        });

                        instance.on('core.field.invalid', function (e) {
                            const fieldEl = e.elements && e.elements.length ? e.elements[0] : null;
                            if (fieldEl) focusFieldAndShowTab(fieldEl);
                        });

                        instance.on('core.form.invalid', function () {
                            const invalidEl = document.querySelector('[data-field].is-invalid, .is-invalid');
                            if (invalidEl) focusFieldAndShowTab(invalidEl);
                        });

                        const vatIncCb = document.getElementById('VatInc');
                        const vatRateEl = document.getElementById('VatRate');

                        instance.on('core.form.valid', function () {
                            const $form = $('#product-form');

                            // Quill içeriğini alıp gizli input'a aktar
                            const quillHtml = fullEditor.root.innerHTML;
                            document.getElementById('Description').value = quillHtml;

                            const serializedData = $form.serialize();

                            $.ajax({
                                url: '@Url.Action("Edit", "Product")',
                                type: 'POST',
                                data: serializedData,
                                success: function (response) {
                                    if (response.success) {
                                        Swal.fire({
                                            title: 'Başarılı!',
                                            text: 'Ürün başarıyla kaydedildi.',
                                            icon: 'success',
                                            confirmButtonText: 'Tamam',
                                            customClass: { confirmButton: 'btn btn-success' },
                                            buttonsStyling: false
                                        }).then(() => {
                                            window.location.href = '@Url.Action("List", "Product")';
                                        });
                                    } else {
                                        Swal.fire({
                                            title: 'Hata!',
                                            text: response.message || 'Bir hata oluştu.',
                                            icon: 'error',
                                            confirmButtonText: 'Tamam',
                                            customClass: { confirmButton: 'btn btn-danger' },
                                            buttonsStyling: false
                                        });
                                    }
                                },
                                error: function (xhr) {
                                    Swal.fire({
                                        title: 'Hata!',
                                        text: xhr.responseText || 'İşlem sırasında bir hata oluştu.',
                                        icon: 'error',
                                        confirmButtonText: 'Tamam',
                                        customClass: { confirmButton: 'btn btn-danger' },
                                        buttonsStyling: false
                                    });
                                }
                            });
                        });
                    }
                }
            );
        });
    </script>

    <script>
        function loadProductCategories(productId) {
          const urlGet = '@Url.Action("Get", "Product")';
          const $tbody = $("#productCategoryTable tbody");
          $tbody.html("<tr><td colspan='3'>Yükleniyor...</td></tr>");

          $.ajax({
            url: urlGet,
            type: 'GET',
            data: { productId: productId },
            success: function (response) {
              $tbody.empty();

              if (response && response.results && response.results.length) {
                $.each(response.results, function (i, item) {
                  const row = `
                    <tr data-mapping-id="${item.id}">
                      <td>${item.text}</td>
                      <td>${item.displayOrder}</td>
                      <td style="width:120px;">
                        <button type="button" class="btn btn-sm btn-outline-danger btn-delete">
                          <i class="ti ti-trash"></i>
                        </button>
                      </td>
                    </tr>`;
                  $tbody.append(row);
                });
              } else {
                $tbody.append("<tr><td colspan='3'>Kategori bulunamadı</td></tr>");
              }
            },
            error: function () {
              $tbody.html("<tr><td colspan='3'>Kategoriler yüklenirken hata oluştu</td></tr>");
            }
          });
        }

        function confirmAndDelete(mappingId, onDone) {
          Swal.fire({
            title: 'Emin misiniz?',
            text: 'Bu ürün-kategori eşleştirmesi silinecek.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Evet, sil',
            cancelButtonText: 'Vazgeç'
          }).then((result) => {
            if (!result.isConfirmed) return;

            const urlDelete = '@Url.Action("DeleteProductCategory", "Product")';
            $.ajax({
              url: urlDelete,
              type: 'GET',
              data: { id: mappingId },
              success: function () {
                if (typeof onDone === 'function') onDone(true);
                Swal.fire({ icon: 'success', title: 'Silindi', timer: 1200, showConfirmButton: false });
              },
              error: function () {
                if (typeof onDone === 'function') onDone(false);
                Swal.fire({ icon: 'error', title: 'Silme başarısız', text: 'Bir hata oluştu.' });
              }
            });
          });
        }

        $(function () {
          const productId = $("#productId").val();
          if (productId) {
            loadProductCategories(productId);
          }

          // Sil butonu handler
          $(document).on('click', '.btn-delete', function () {
            const $tr = $(this).closest('tr');
            const mappingId = $tr.data('mapping-id');

            confirmAndDelete(mappingId, function (ok) {
              if (ok) {
                $tr.remove();
                // İstersen tüm listeyi yenile:
                // loadProductCategories(productId);
              }
            });
          });
        });
    </script>

    <script>
        $(function () {
          const $modal = $('#ProductCategoryModel');
          if ($modal.length) $modal.appendTo('body');

          $modal.on('shown.bs.modal', function () {
            const $cat = $('#CategoryId');
            if (!$cat.data('select2')) {
              $cat.select2({
                placeholder: 'Kategori seçiniz',
                allowClear: true,
                dropdownParent: $modal,
                width: '100%',
                ajax: {
                  url: '@Url.Action("AllCategory", "Category")',
                  type: 'POST',
                  dataType: 'json',
                  delay: 250,
                  data: function (params) {
                    return { term: params.term || '', page: params.page || 1 };
                  },
                  processResults: function (data, params) {
                    params.page = params.page || 1;
                    return {
                      results: data.results, // [{id,text}]
                      pagination: { more: data.pagination?.more === true }
                    };
                  },
                  cache: true
                }
              });
            }
            clearCategoryValidationUI();
          });

          function setInvalid($el, message, feedbackId) {
            $el.addClass('is-invalid');
            if ($el.hasClass('select2')) {
              $el.next('.select2').find('.select2-selection').addClass('is-invalid');
            }
            let $fb = $('#' + feedbackId);
            if ($fb.length === 0) {
              $fb = $('<div/>', { id: feedbackId, class: 'invalid-feedback d-block' }).insertAfter($el);
            }
            $fb.text(message);
          }

          function clearInvalid($el, feedbackId) {
            $el.removeClass('is-invalid');
            if ($el.hasClass('select2')) {
              $el.next('.select2').find('.select2-selection').removeClass('is-invalid');
            }
            $('#' + feedbackId).remove();
          }

          function clearCategoryValidationUI() {
            clearInvalid($('#CategoryId'), 'CategoryIdFeedback');
            clearInvalid($('#DisplayOrder'), 'DisplayOrderFeedback');
          }

          function validateProductCategoryModal() {
            clearCategoryValidationUI();
            const errors = [];

            const categoryId = $('#CategoryId').val();
            if (!categoryId || categoryId === '' || categoryId === '0') {
              setInvalid($('#CategoryId'), 'Lütfen bir kategori seçiniz.', 'CategoryIdFeedback');
              errors.push('Lütfen bir kategori seçiniz.');
            }

            const displayOrderRaw = $('#DisplayOrder').val();
            if (displayOrderRaw !== '' && displayOrderRaw !== null && displayOrderRaw !== undefined) {
              const displayOrder = Number(displayOrderRaw);
              const isInt = Number.isInteger(displayOrder);
              if (!isInt || displayOrder < 0) {
                setInvalid($('#DisplayOrder'), 'Sıra 0 veya daha büyük tam sayı olmalıdır.', 'DisplayOrderFeedback');
                errors.push('Sıra 0 veya daha büyük tam sayı olmalıdır.');
              }
            }

            return { valid: errors.length === 0, errors };
          }

          $(document).on('click', '#btnSaveProductCategory', function () {
            const $btn = $(this);

            const v = validateProductCategoryModal();
            if (!v.valid) {
              Swal.fire({
                icon: 'warning',
                title: 'Eksik / Hatalı Bilgi',
                html: v.errors.map(e => `<div>${e}</div>`).join(''),
                confirmButtonText: 'Tamam',
                customClass: { confirmButton: 'btn btn-warning' },
                buttonsStyling: false
              }).then(() => {
                if ($('#CategoryId').hasClass('is-invalid')) {
                  $('#CategoryId').select2('open');
                } else if ($('#DisplayOrder').hasClass('is-invalid')) {
                  $('#DisplayOrder').focus();
                }
              });
              return;
            }

            const payload = {
              productId: Number($('#productId').val()) || 0,  // 🔧 doğru selector
              categoryId: Number($('#CategoryId').val()) || 0,
              displayOrder: Number($('#DisplayOrder').val()) || 0
            };

            $btn.prop('disabled', true);

            fetch('@Url.Action("CreateProductCategory", "Product")', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            })
            .then(r => r.json())
            .then(json => {
              if (json?.success) {
                $('#ProductCategoryModel').modal('hide');
                localStorage.setItem('productActiveTab', '#form-tabs-categories');

                Swal.fire({
                  icon: 'success',
                  title: 'Başarılı!',
                  text: 'Kategori başarıyla kaydedildi.',
                  confirmButtonText: 'Tamam',
                  customClass: { confirmButton: 'btn btn-success' },
                  buttonsStyling: false
                }).then(() => {
                  // ✅ 1) Kategoriler tabını aç
                  activateTab('#form-tabs-categories');

                  // ✅ 2) Tabloyu yenile
                  const productId = $('#productId').val();
                  loadProductCategories(productId);

                  // (Opsiyonel) Modal alanlarını temizle
                  $('#CategoryId').val(null).trigger('change');
                  $('#DisplayOrder').val('');
                });
              } else {
                const errs = Array.isArray(json?.errors) ? json.errors.join('\n') : (json?.errors || 'Kayıt başarısız.');
                Swal.fire({
                  icon: 'error',
                  title: 'Hata!',
                  text: errs,
                  confirmButtonText: 'Tamam',
                  customClass: { confirmButton: 'btn btn-danger' },
                  buttonsStyling: false
                });
              }
            })
            .catch(err => {
              console.error(err);
              Swal.fire({
                icon: 'error',
                title: 'Sunucu Hatası!',
                text: 'İşlem sırasında bir hata oluştu.',
                confirmButtonText: 'Tamam',
                customClass: { confirmButton: 'btn btn-danger' },
                buttonsStyling: false
              });
            })
            .finally(() => $btn.prop('disabled', false));
          });

          function activateTab(paneSelector) {
            const triggerEl =
              document.querySelector(`[data-bs-target="${paneSelector}"]`) ||
              document.querySelector(`a[href="${paneSelector}"]`);
            if (triggerEl && window.bootstrap?.Tab) {
              const tab = new bootstrap.Tab(triggerEl);
              tab.show();
              document.querySelector(paneSelector)?.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
          }
        });
    </script>

    <script>
        $(document).ready(function() {
            $('#SelectedProductAttributeIds').wrap('<div class="position-relative"></div>');

            $("#SelectedProductAttributeIds").select2({
                 width: '100%',
                 placeholder: "Varyant seçiniz",
                 allowClear: true,
                 dropdownParent: $('#SelectedProductAttributeIds').parent(),
            });

                $('#ProductVariantAttributeCombinationRepeater').repeater({
            initEmpty: false,
            show: function() {
                $(this).slideDown();

                // Outer item eklendikten sonra inner repeater'ı başlat
                $(this).find('.AttributesRepeater').repeater({
                    initEmpty: false,
                    show: function() { $(this).slideDown(); },
                    hide: function(deleteElement) {
                        if(confirm('Attribute silinecek emin misiniz?')) $(this).slideUp(deleteElement);
                    }
                });
            },
            hide: function(deleteElement) {
                if(confirm('Varyant silinecek emin misiniz?')) $(this).slideUp(deleteElement);
            },
            repeaters: [{
                // Nested repeater selector
                selector: '.AttributesRepeater',
                initEmpty: false,
                show: function() { $(this).slideDown(); },
                hide: function(deleteElement) {
                    if(confirm('Attribute silinecek emin misiniz?')) $(this).slideUp(deleteElement);
                }
            }]
        });
        });
    </script>




}
