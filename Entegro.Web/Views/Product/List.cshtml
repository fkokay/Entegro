@using System.Text.Json
@{
    ViewData["Title"] = "Ürünler";

    var jsonCommerces = JsonSerializer.Serialize(ViewBag.Commerces);
}
<!--Bağlantılar Dropdown cssleri-->
<style>

    .dropdown-submenu {
        position: relative;
    }


    .submenu-down {
        position: absolute;
        top: 100%;
        left: -60px;
        display: none;
        z-index: 1000;
        margin-top: 0.25rem;
        border-radius: 0.25rem;
        min-width: 160px;
        padding: 0.5rem 0;
    }


    .dropdown-submenu:hover > .submenu-down {
        display: block;
    }


    .submenu-down .dropdown-item {
        padding: 0.25rem 1.5rem;
        white-space: nowrap;
    }

    .integration-name {
        cursor: pointer;
        color: #212529; 
        transition: color 0.2s ease;
    }

        .integration-name:hover {
            color: #0d6efd; 
            text-decoration: underline;
        }
</style>
<!--Bağlantılar Dropdown cssleri-->

<div class="flex-grow-1 container-p-y container-fluid">
    <div class="d-flex flex-column justify-content-center">
        <h4 class="mb-3">@ViewData["Title"]</h4>
    </div>
    <div class="card">
        <div class="card-header border-bottom">
            <h5 class="card-title">Filtreler</h5>
            <div class="d-flex justify-content-between align-items-center row pt-4 gap-6 gap-md-0 g-md-6">
                <div class="col-md-4 productFilterBrand"></div>
            </div>
        </div>
        <div class="card-datatable">
            <table id="ProductTable" class="table">
                <thead class="border-top">
                    <tr>
                        <th></th>
                        <th></th>
                        <th>BrandId</th>
                        <th>Ürün Adı</th>
                        <th>Ürün Kodu</th>
                        <th>Barkod</th>
                        <th>Liste Fiyatı</th>
                        <th>Güncellenme Tarihi</th>
                        <th></th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

<div class="modal fade" id="addIntegration" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-simple modal-edit-user modal-dialog-centered">
        <div class="modal-content p-3 p-md-5">
            <div class="modal-body">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="text-center mb-4">
                    <h3 class="mb-2">Entegrasyon Bilgileri</h3>
                </div>

                <form asp-action="CreateProductIntegrationWithModel" asp-controller="Product" class="row g-3">
                    <input type="hidden" id="productId" name="ProductId" />
                    <input type="hidden" id="integrationSystemId" name="IntegrationSystemId" />

                    <div class="col-12 col-md-12">
                        <label class="form-label" for="price">Fiyat</label>
                        <input type="number" id="price" name="Price" class="form-control"
                               step="0.01" value="0" min="0" required />
                    </div>

                    <div class="col-12 text-center">
                        <button type="submit" class="btn btn-primary me-sm-3 me-1">Kaydet</button>
                        <button type="reset" class="btn btn-label-secondary" data-bs-dismiss="modal">İptal</button>
                    </div>
                </form>

            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="editIntegration" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-simple modal-edit-user modal-dialog-centered">
        <div class="modal-content p-3 p-md-5">
            <div class="modal-body">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="text-center mb-4">
                    <h3 class="mb-2">Entegrasyon Bilgileri Düzenle</h3>
                </div>

                <form asp-action="UpdateProductIntegration" asp-controller="Product" class="row g-3">
                    <input type="hidden" id="editProductId" name="ProductId" />
                    <input type="hidden" id="editIntegrationSystemId" name="IntegrationSystemId" />

                    <div class="col-12 col-md-12">
                        <label class="form-label" for="editPrice">Fiyat</label>
                        <input type="number" id="editPrice" name="Price" class="form-control"
                               step="0.01" value="0" min="0" required />
                    </div>

                    <div class="col-12 text-center">
                        <button type="submit" class="btn btn-primary me-sm-3 me-1">Kaydet</button>
                        <button type="reset" class="btn btn-label-secondary" data-bs-dismiss="modal">İptal</button>
                    </div>
                </form>

            </div>
        </div>
    </div>
</div>
@section Scripts {

    <script>
            $(function() {
                var commerces = @Html.Raw(jsonCommerces);
                var commercesButton = [];
                $.each(commerces, function(index, item) {
                    commercesButton.push({
                        className: "dropdown-item",
                        text: `
                             <span class="d-flex align-items-center text-center" onclick="ProductIntegration(${item.Id})">
                                Tüm Ürünleri<br>${item.Name}<br> Mağzasına Bağla
                             </span>`,
                    });
                });

                var table = $('#ProductTable').DataTable({
                    language: {
                        paginate: {
                            next: '<i class="icon-base ti ti-chevron-right scaleX-n1-rtl icon-18px"></i>',
                            previous: '<i class="icon-base ti ti-chevron-left scaleX-n1-rtl icon-18px"></i>',
                            first: '<i class="icon-base ti ti-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                            last: '<i class="icon-base ti ti-chevrons-right scaleX-n1-rtl icon-18px"></i>'
                        },
                        url: '//cdn.datatables.net/plug-ins/2.3.2/i18n/tr.json',
                    },
                    serverSide: true,
                    ajax: {
                        url: '/Product/ProductList',
                        type: 'POST',
                        contentType: 'application/json',
                        data: function(d) {
                            return JSON.stringify(d);
                        },
                    },
                    columns: [{
                            data: 'Id'
                        },
                        {
                            data: 'Id',
                            orderable: false,
                            render: DataTable.render.select()
                        },
                        {
                            data: 'BrandId',
                            visible: false
                        },
                        {
                            data: 'Name'
                        },
                        {
                            data: 'Code'
                        },
                        {
                            data: 'Barcode'
                        },
                        {
                            data: 'Price',
                            render: $.fn.dataTable.render.number(".", ",", 2)
                        },
                        {
                            data: 'UpdatedOn',
                            render: function(data, type, row) {
                                if (type === "sort" || type === "type") {
                                    return data;
                                }
                                return moment(data).format("DD.MM.yyyy HH:mm");
                            }
                        },
                        {
                            data: 'Id'
                        },
                    ],
                    columnDefs: [{
                            className: "control",
                            searchable: false,
                            orderable: false,
                            responsivePriority: 2,
                            targets: 0,
                            render: () => ""
                        },
                        {
                            targets: 1,
                            orderable: false,
                            searchable: false,
                            responsivePriority: 3,
                            checkboxes: {
                                selectAllRender: '<input type="checkbox" class="form-check-input">'
                            },
                            render: () => '<input type="checkbox" class="dt-checkboxes form-check-input">'
                        },
                        {
                            targets: 3,
                            responsivePriority: 1,
                            render: (data, type, row) => {
                                const image = row.MainPicture == null ? '' : `<img src="${row.MainPicture.Url}" class="rounded">`;
                                return `
                                  <div class="d-flex justify-content-start align-items-center product-name">
                                      <div class="avatar-wrapper">
                                          <div class="avatar me-2 me-sm-4 rounded-2 bg-label-secondary">
                                              ${image}
                                          </div>
                                      </div>
                                      <div class="d-flex flex-column">
                                          <h6 class="text-nowrap mb-0">${row.Name}</h6>
                                          <small class="text-truncate d-none d-sm-block">${row.Brand?.Name || ""}</small>

                                      </div>
                                  </div>`;

                            }
                        },
                        {
                            targets: -1,
                            title: "İşlemler",
                            searchable: false,
                            orderable: false,
                                    render: (data, type, row) => {
                              let integrationLinks = "";

                              if (commerces?.length) {
                                integrationLinks = commerces.map(c => `
                                  <li>
                                    <a href="javascript:void(0);"
                                       class="dropdown-item open-integration"
                                       data-bs-toggle="modal" data-bs-target="#addIntegration"
                                       data-product-id="${row.Id}"
                                       data-integration-system-id="${c.Id}">
                                      ${c.Name} ata
                                    </a>
                                  </li>
                                `).join("");
                              }

                              return `
                                <div class="d-inline-block text-nowrap">
                                  <a href="Edit?id=${row.Id}" class="btn btn-text-secondary rounded-pill waves-effect btn-icon">
                                    <i class="icon-base ti ti-pencil icon-22px"></i>
                                  </a>
                                  <button class="btn btn-text-secondary rounded-pill waves-effect btn-icon dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                    <i class="icon-base ti ti-dots-vertical icon-22px"></i>
                                  </button>
                                  <div class="dropdown-menu dropdown-menu-end m-0">
                                    <div class="dropdown-submenu dropdown-item">
                                      <a href="#" class="dropdown-toggle">Bağlantılar</a>
                                      <ul class="dropdown-menu submenu-down">
                                        ${integrationLinks || '<li><span class="dropdown-item text-muted">Bağlantı yok</span></li>'}
                                      </ul>
                                    </div>
                                    <a href="javascript:void(0);" class="dropdown-item">Suspend</a>
                                  </div>
                                </div>
                              `;
                            }}
                    ],
                    select: {
                        style: "multi",
                        selector: "td:nth-child(2)"
                    },
                    order: [3, "asc"],
                    displayLength: 7,
                    layout: {
                        topStart: {
                            rowClass: "card-header d-flex border-top rounded-0 flex-wrap py-0 flex-column flex-md-row align-items-start",
                            features: [{
                                search: {
                                    className: "me-5 ms-n4 pe-5 mb-n6 mb-md-0",
                                    placeholder: "Ara..",
                                    text: "_INPUT_"
                                }
                            }]
                        },
                        topEnd: {
                            rowClass: "row m-3 my-0 justify-content-between",
                            features: [{
                                pageLength: {
                                    menu: [7, 10, 25, 50, 100],
                                    text: "_MENU_"
                                },
                                buttons: [{
                                        extend: "collection",
                                        className: "btn btn-label-secondary dropdown-toggle me-4",
                                        text: `
                                                     <span class="d-flex align-items-center gap-1">
                                                         <i class="icon-base ti ti-import icon-xs"></i>
                                                         <span class="d-none d-sm-inline-block">E-Ticaret Entegrasyonu</span>
                                                     </span>`,
                                        buttons: [
                                            commercesButton
                                        ]
                                    },
                                    {
                                        extend: "collection",
                                        className: "btn btn-label-secondary dropdown-toggle me-4",
                                        text: `
                                                     <span class="d-flex align-items-center gap-1">
                                                         <i class="icon-base ti ti-upload icon-xs"></i>
                                                         <span class="d-none d-sm-inline-block">Dışarı Aktar</span>
                                                     </span>`,
                                        buttons: [
                                            // Print
                                            {
                                                extend: "print",
                                                className: "dropdown-item",
                                                text: `
                                                             <span class="d-flex align-items-center">
                                                                 <i class="icon-base ti tabler-printer me-1"></i> Print
                                                             </span>`,
                                                exportOptions: {
                                                    columns: [3, 4, 5, 6, 7]
                                                }
                                            },
                                            // CSV
                                            {
                                                extend: "csv",
                                                className: "dropdown-item",
                                                text: `
                                                             <span class="d-flex align-items-center">
                                                                 <i class="icon-base ti tabler-file me-1"></i> Csv
                                                             </span>`,
                                                exportOptions: {
                                                    columns: [3, 4, 5, 6, 7]
                                                }
                                            },
                                            // Excel
                                            {
                                                extend: "excel",
                                                className: "dropdown-item",
                                                text: `
                                                             <span class="d-flex align-items-center">
                                                                 <i class="icon-base ti tabler-upload me-1"></i> Excel
                                                             </span>`,
                                                exportOptions: {
                                                    columns: [3, 4, 5, 6, 7]
                                                }
                                            },
                                            // PDF
                                            {
                                                extend: "pdf",
                                                className: "dropdown-item",
                                                text: `
                                                             <span class="d-flex align-items-center">
                                                                 <i class="icon-base ti tabler-file-text me-1"></i> Pdf
                                                             </span>`,
                                                exportOptions: {
                                                    columns: [3, 4, 5, 6, 7]
                                                }
                                            },
                                            // Copy
                                            {
                                                extend: "copy",
                                                className: "dropdown-item",
                                                text: `
                                                             <i class="icon-base ti tabler-copy me-1"></i> Copy`,
                                                exportOptions: {
                                                    columns: [3, 4, 5, 6, 7]
                                                }
                                            }
                                        ]
                                    },
                                    // Yeni ürün ekle butonu
                                    {
                                        text: `
                                                     <i class="icon-base ti ti-plus me-0 me-sm-1 icon-16px"></i>
                                                     <span class="d-none d-sm-inline-block">Yeni Kayıt</span>`,
                                        className: "add-new btn btn-primary",
                                        action: function() {
                                            window.location.href = "Create";
                                        }
                                    }
                                ]
                            }]
                        },
                        bottomStart: {
                            rowClass: "row mx-3 justify-content-between",
                            features: ["info"]
                        },
                        bottomEnd: "paging"
                    },
                    initComplete: function() {
                        const api = this.api();
                        api.columns(2).every(function() {
                            addFilterDropdown(this, ".productFilterBrand", "Marka", [{
                                title: "mevababy",
                                id: 83
                            }]);
                        });
                    }
                });

                table.on('draw.dt', function() {
                    table.rows({
                        page: 'current'
                    }).every(function() {
                        var row = this;
                        let integrationHtml = "";
                        if (row.data().ProductIntegrations && row.data().ProductIntegrations.length > 0) {
                            row.data().ProductIntegrations.forEach(pi => {
                                integrationHtml += `
                                            <div class="col-2 mb-2">
                                                  <div class="d-flex justify-content-start align-items-center product-integration">
                                                   <div class="product-integration-image">
                                                        <img src="https://smartstore.com/Themes/HP/images/smartstore-icon.svg" title="${pi.IntegrationSystem.Name}" class="rounded">
                                                   </div>
                                                   <div class="product-integration-info">

                                                        <span class="name integration-name"
                                                              data-product-id="${row.data().Id}"
                                                              data-integration-id="${pi.IntegrationSystem.Id}"
                                                              data-price="${pi.Price}">
                                                             ${pi.IntegrationSystem.Name}(${1784})
                                                        </span>
                                                       <span class="price">${pi.Price.toLocaleString("tr-TR", { maximumFractionDigits: 2, minimumFractionDigits: 2 })} TL</span>
                                                    </div>
                                                    <span class="w-px-30 h-px-30 d-flex justify-content-center align-items-center me-4 product-status">
                                                       Satışta
                                                    </span>
                                                </div>
                                             </div>`;
                            });
                        }
                        // child zaten açık değilse aç
                        if (!row.child.isShown()) {
                            row.child('<div class="row">' + integrationHtml + '</div>').show();
                        }
                    });
                });


                setTimeout(() => {
                    const adjustments = [{
                            selector: ".dt-buttons .btn",
                            classToRemove: "btn-secondary"
                        },
                        {
                            selector: ".dt-buttons.btn-group",
                            classToAdd: "mb-md-0 mb-6"
                        },
                        {
                            selector: ".dt-search .form-control",
                            classToRemove: "form-control-sm",
                            classToAdd: "ms-0"
                        },
                        {
                            selector: ".dt-search",
                            classToAdd: "mb-0 mb-md-6"
                        },
                        {
                            selector: ".dt-length .form-select",
                            classToRemove: "form-select-sm"
                        },
                        {
                            selector: ".dt-layout-end",
                            classToAdd: "gap-md-2 gap-0 mt-0"
                        },
                        {
                            selector: ".dt-layout-start",
                            classToAdd: "mt-0"
                        },
                        {
                            selector: ".dt-layout-table",
                            classToRemove: "row mt-2"
                        },
                        {
                            selector: ".dt-layout-full",
                            classToRemove: "col-md col-12",
                            classToAdd: "table-responsive"
                        }
                    ];

                    adjustments.forEach(({
                        selector,
                        classToRemove,
                        classToAdd
                    }) => {
                        document.querySelectorAll(selector).forEach(element => {
                            if (classToRemove) {
                                classToRemove.split(" ").forEach(cls => element.classList.remove(cls));
                            }

                            if (classToAdd) {
                                classToAdd.split(" ").forEach(cls => element.classList.add(cls));
                            }
                        });
                    })
                }, 100);

                function addFilterDropdown(column, containerSelector, placeholder, map) {
                    let select = document.createElement("select");
                    select.className = "form-select text-capitalize";
                    select.innerHTML = `<option value="">${placeholder}</option>`;

                    document.querySelector(containerSelector).appendChild(select);

                    select.addEventListener("change", function() {
                        const val = select.value ? `^${select.value}$` : "";
                        column.search(val, true, false).draw();
                    });

                    column.data().unique().sort().each(function(value) {
                        const item = map.find(x => x.id === value);
                        if (item) {
                            let option = document.createElement("option");
                            option.value = item.id;
                            option.textContent = item.title;
                            select.appendChild(option);
                        }
                    });
                }
            });

        function ProductIntegration(integrationSystemId) {
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Tüm ürünlere entegrasyon uygulanacak!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Evet, uygula!',
                cancelButtonText: 'İptal',
                preConfirm: () => {
                    return fetch('/Product/CreateProductIntegration', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'
                            },
                            body: "integrationSystemId=" + encodeURIComponent(integrationSystemId)
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(response.statusText);
                            }
                            return response.json();
                        })
                        .catch(error => {
                            Swal.showValidationMessage(`Hata: ${error}`);
                        });
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed && result.value?.success) {
                    Swal.fire(
                        'Başarılı!',
                        result.value.message,
                        'success'
                    );
                } else if (result.value && !result.value.success) {
                    Swal.fire(
                        'Hata!',
                        result.value.message,
                        'error'
                    );
                }
            });
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {

          document.body.addEventListener('click', function (e) {
            const target = e.target.closest('.open-integration');
            if (target) {
              const productId = target.getAttribute('data-product-id');
              const integrationSystemId = target.getAttribute('data-integration-system-id');

              document.getElementById('productId').value = productId;
              document.getElementById('integrationSystemId').value = integrationSystemId;
            }
          });
        });
    </script>

    <script>

        $(document).on('click', '.integration-name', function () {
            const productId = $(this).data('product-id');
            const integrationId = $(this).data('integration-id');
            const price = $(this).data('price');

            $('#editProductId').val(productId);
            $('#editIntegrationSystemId').val(integrationId);
            $('#editPrice').val(price);

            $('#editIntegration').modal('show');
        });
    </script>

}