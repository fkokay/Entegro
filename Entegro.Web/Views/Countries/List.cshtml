
@{
    ViewData["Title"] = "Ülkeler";
}

<div class="flex-grow-1 container-p-y container-fluid">
    <div class="card">
        <div class="row card-header flex-column flex-md-row border-bottom mx-0 px-3">
            <div class="d-md-flex justify-content-between align-items-center dt-layout-start col-md-auto me-auto mt-0">
                <h5 class="card-title mb-0 text-md-start text-center pb-md-0 pb-6">Ülkeler</h5>
            </div>
            <div class="d-md-flex justify-content-between align-items-center dt-layout-end col-md-auto ms-auto mt-0"></div>
        </div>

        <div class="card-datatable table-responsive">
            <table id="CountryTable" class="dt-fixedheader table table-bordered dataTable dtr-column">
                <thead>
                    <tr>
                        <th></th>
                        <th>Id</th>
                        <th>Ülke adı</th>
                        <th>Görüntüleme sırası</th>
                        <th>Yayınlandı</th>
                        <th></th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function () {
          const table = $('#CountryTable').DataTable({
            language: {
              paginate: {
                next: '<i class="icon-base ti ti-chevron-right scaleX-n1-rtl icon-18px"></i>',
                previous: '<i class="icon-base ti ti-chevron-left scaleX-n1-rtl icon-18px"></i>',
                first: '<i class="icon-base ti ti-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                last:  '<i class="icon-base ti ti-chevrons-right scaleX-n1-rtl icon-18px"></i>'
              },
              url: '//cdn.datatables.net/plug-ins/2.3.2/i18n/tr.json',
            },
            serverSide: true,
            order: [[2, 'asc']], 
            ajax: {
              url: '/Countries/CountryList',
              type: 'POST',
              contentType: 'application/json',
              data: function (d) { return JSON.stringify(d); },
            },
            columns: [
              { data: 'Id', orderable: false },                 
              { data: 'Id', visible: false },                   
              { data: 'Name' },                                 
              { data: 'DisplayOrder' },                         
              {                                                 
               data: 'Published',
                render: function (data, type) {
                  if (type === "sort" || type === "type") return data;

                  if (data === true) {
                    return `<span style="color: green;">Yayında</span>`;
                  } else {
                    return `<span style="color: red;">Yayınlanmadı</span>`;
                  }
                }
              },
              { data: 'Id' }                                   
            ],
            columnDefs: [
              {
                targets: 0, // checkbox kolonu
                orderable: false,
                searchable: false,
                responsivePriority: 3,
                checkboxes: { selectAllRender: '<input type="checkbox" class="form-check-input">' },
                render: () => '<input type="checkbox" class="dt-checkboxes form-check-input">'
              },
              {
                targets: -1,
                title: 'İşlemler',
                searchable: false,
                orderable: false,
                render: (data, type, row) => `
                  <div class="d-inline-block text-nowrap">
                    <a href="Edit?id=${row.Id}" class="btn btn-text-secondary rounded-pill waves-effect btn-icon" title="Düzenle">
                      <i class="icon-base ti ti-pencil icon-22px"></i>
                    </a>
                    <button class="btn btn-text-secondary rounded-pill waves-effect btn-icon dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                      <i class="icon-base ti ti-dots-vertical icon-22px"></i>
                    </button>
                    <div class="dropdown-menu dropdown-menu-end m-0">
                      <a href="javascript:void(0);" class="dropdown-item text-danger delete-record" data-id="${row.Id}">Sil</a>
                    </div>
                  </div>`
              }
            ],
            select: { style: "multi", selector: "td:nth-child(1)" }, // checkbox artık 1. sütun
            displayLength: 10,
            layout: {
              topStart: {
                rowClass: "card-header d-flex border-top rounded-0 flex-wrap py-0 flex-column flex-md-row align-items-start",
                features: [
                  { search: { className: "me-5 ms-n4 pe-5 mb-n6 mb-md-0", placeholder: "Ara..", text: "_INPUT_" } }
                ]
              },
              topEnd: {
                rowClass: "row m-3 my-0 justify-content-between",
                features: [
                  {
                    pageLength: { menu: [10, 25, 50, 100], text: "_MENU_" },
                    buttons: [
                      {
                        extend: "collection",
                        className: "btn btn-label-secondary dropdown-toggle me-4",
                        text: `<span class="d-flex align-items-center gap-1">
                                 <i class="icon-base ti ti-upload icon-xs"></i>
                                 <span class="d-none d-sm-inline-block">Dışarı Aktar</span>
                               </span>`,
                        buttons: [
                          { extend: "print", className: "dropdown-item",
                            text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-printer me-1"></i> Print</span>`,
                            exportOptions: { columns: [2,3,4] } },
                          { extend: "csv", className: "dropdown-item",
                            text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-file me-1"></i> Csv</span>`,
                            exportOptions: { columns: [2,3,4] } },
                          { extend: "excel", className: "dropdown-item",
                            text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-upload me-1"></i> Excel</span>`,
                            exportOptions: { columns: [2,3,4] } },
                          { extend: "pdf", className: "dropdown-item",
                            text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-file-text me-1"></i> Pdf</span>`,
                            exportOptions: { columns: [2,3,4] } },
                          { extend: "copy", className: "dropdown-item",
                            text: `<i class="icon-base ti tabler-copy me-1"></i> Copy`,
                            exportOptions: { columns: [2,3,4] } }
                        ]
                      },
                      {
                        text: `<i class="icon-base ti ti-plus me-0 me-sm-1 icon-16px"></i>
                               <span class="d-none d-sm-inline-block">Yeni Ekle</span>`,
                        className: "add-new btn btn-primary",
                        action: function () { window.location.href = "Create"; }
                      }
                    ]
                  }
                ]
              },
              bottomStart: { rowClass: "row mx-3 justify-content-between", features: ["info"] },
              bottomEnd: "paging"
            }
          });

          // Sınıf düzeltmeleri (opsiyonel; görünümü düzenler)
          setTimeout(() => {
            const adjustments = [
              { selector: ".dt-buttons .btn", classToRemove: "btn-secondary" },
              { selector: ".dt-buttons.btn-group", classToAdd: "mb-md-0 mb-6" },
              { selector: ".dt-search .form-control", classToRemove: "form-control-sm", classToAdd: "ms-0" },
              { selector: ".dt-search", classToAdd: "mb-0 mb-md-6" },
              { selector: ".dt-length .form-select", classToRemove: "form-select-sm" },
              { selector: ".dt-layout-end", classToAdd: "gap-md-2 gap-0 mt-0" },
              { selector: ".dt-layout-start", classToAdd: "mt-0" },
              { selector: ".dt-layout-table", classToRemove: "row mt-2" },
              { selector: ".dt-layout-full", classToRemove: "col-md col-12", classToAdd: "table-responsive" }
            ];
            adjustments.forEach(({ selector, classToRemove, classToAdd }) => {
              document.querySelectorAll(selector).forEach(el => {
                if (classToRemove) classToRemove.split(" ").forEach(cls => el.classList.remove(cls));
                if (classToAdd) classToAdd.split(" ").forEach(cls => el.classList.add(cls));
              });
            });
          }, 100);

          // Silme akışı
          $(document).on('click', '.delete-record', function () {
            const countryId = $(this).data('id');
            Swal.fire({
              title: 'Emin misiniz?',
              text: 'Bu ülke silinecek!',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonText: 'Evet, sil!',
              cancelButtonText: 'İptal',
              customClass: { confirmButton: 'btn btn-danger me-3', cancelButton: 'btn btn-secondary' },
              buttonsStyling: false
            }).then((result) => {
              if (result.isConfirmed) {
                $.ajax({
                  url: '@Url.Action("Delete", "Countries")',
                  type: 'POST',
                  data: { id: countryId },
                  success: function (response) {
                    if (response.success) {
                      Swal.fire({
                        icon: 'success',
                        title: 'Silindi!',
                        text: 'Ülke başarıyla silindi.',
                        confirmButtonText: 'Tamam',
                        customClass: { confirmButton: 'btn btn-success' },
                        buttonsStyling: false
                      }).then(() => { table.ajax.reload(null, false); });
                    } else {
                      Swal.fire({
                        icon: 'error',
                        title: 'Hata!',
                        text: response.message || 'Silme işlemi başarısız oldu.',
                        confirmButtonText: 'Tamam',
                        customClass: { confirmButton: 'btn btn-danger' },
                        buttonsStyling: false
                      });
                    }
                  },
                  error: function () {
                    Swal.fire({
                      icon: 'error',
                      title: 'Sunucu Hatası!',
                      text: 'İstek gönderilirken bir hata oluştu.',
                      confirmButtonText: 'Tamam',
                      customClass: { confirmButton: 'btn btn-danger' },
                      buttonsStyling: false
                    });
                  }
                });
              }
            });
          });
        });
    </script>
}