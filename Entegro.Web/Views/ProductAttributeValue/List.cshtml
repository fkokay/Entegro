@{
    ViewData["Title"] = "Varyant Değerleri";
}

<div class="flex-grow-1 container-p-y container-fluid">
    <div class="d-flex flex-column justify-content-center">
        <h4 class="mb-3">@ViewData["Title"]</h4>
    </div>
    <div class="card">
        <div class="card-header border-bottom">
            <h5 class="card-title">Filtreler</h5>
            <div class="d-flex justify-content-between align-items-center row pt-4 gap-6 gap-md-0 g-md-6">
                <div class="col-md-4 productFilterBrand"></div>
            </div>
        </div>
        <div class="card-datatable">
            <table id="ProductAttributeValueTable" class="table">
                <thead class="border-top">
                    <tr>
                        <th></th>
                        <th></th>
                        <th>Varyant Adı</th>
                        <th>Değeri</th>
                        <th>Görüntüleme Sırası</th>
                        <th></th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>


<!-- Create Product Attribute Value Modal -->
<div class="modal fade" id="createAttributeValue" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-simple modal-dialog-centered">
        <div class="modal-content p-3 p-md-5">
            <div class="modal-body">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="text-center mb-4">
                    <h3 class="mb-2">Yeni Varyant Değeri</h3>
                </div>

                <form id="createAttributeValueForm" class="row g-3" onsubmit="return false;">
                    <!-- ProductAttributeId -->
                    <div class="col-12 mb-3">
                        <label class="form-label" for="ProductAttributeId">Varyant Adı <span class="text-danger">*</span></label>
                        <select id="ProductAttributeId" name="ProductAttributeId" class="form-select" style="width:100%"></select>
                    </div>

                    <!-- Name -->
                    <div class="col-12 mb-3">
                        <label class="form-label" for="Name">Değer Adı <span class="text-danger">*</span></label>
                        <input type="text" id="Name" name="Name" class="form-control" placeholder="Örn: Kırmızı" />
                    </div>

                    <!-- DisplayOrder -->
                    <div class="col-12 mb-3">
                        <label class="form-label" for="DisplayOrder">Gösterim Sırası <span class="text-danger">*</span></label>
                        <input type="number" id="DisplayOrder" name="DisplayOrder" class="form-control" placeholder="0" />
                    </div>

                    <div class="col-12 text-center">
                        <button type="submit" class="btn btn-primary me-sm-3 me-1">Kaydet</button>
                        <button type="reset" class="btn btn-label-secondary" data-bs-dismiss="modal">Vazgeç</button>
                    </div>
                </form>

            </div>
        </div>
    </div>
</div>


<!-- Edit Product Attribute Value Modal -->
<div class="modal fade" id="editAttributeValue" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-simple modal-dialog-centered">
        <div class="modal-content p-3 p-md-5">
            <div class="modal-body">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                <div class="text-center mb-4">
                    <h3 class="mb-2">Varyant Değeri Güncelle</h3>
                </div>

                <form id="editAttributeValueForm" class="row g-3" onsubmit="return false;">
                    <input type="hidden" id="Edit_Id" name="Id" />

                    <!-- ProductAttributeId -->
                    <div class="col-12 mb-3">
                        <label class="form-label" for="Edit_ProductAttributeId">Varyant Adı <span class="text-danger">*</span></label>
                        <select id="Edit_ProductAttributeId" name="ProductAttributeId" class="form-select" style="width:100%"></select>
                    </div>

                    <!-- Name -->
                    <div class="col-12 mb-3">
                        <label class="form-label" for="Edit_Name">Değer Adı <span class="text-danger">*</span></label>
                        <input type="text" id="Edit_Name" name="Name" class="form-control" placeholder="Örn: Kırmızı" />
                    </div>

                    <!-- DisplayOrder -->
                    <div class="col-12 mb-3">
                        <label class="form-label" for="Edit_DisplayOrder">Gösterim Sırası <span class="text-danger">*</span></label>
                        <input type="number" id="Edit_DisplayOrder" name="DisplayOrder" class="form-control" placeholder="0" />
                    </div>

                    <div class="col-12 text-center">
                        <button type="submit" class="btn btn-primary me-sm-3 me-1">Kaydet</button>
                        <button type="reset" class="btn btn-label-secondary" data-bs-dismiss="modal">Vazgeç</button>
                    </div>
                </form>

            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function () {
            // ================== DataTable ==================
            const dt = $('#ProductAttributeValueTable').DataTable({
                language: {
                    paginate: {
                        next: '<i class="icon-base ti ti-chevron-right scaleX-n1-rtl icon-18px"></i>',
                        previous: '<i class="icon-base ti ti-chevron-left scaleX-n1-rtl icon-18px"></i>',
                        first: '<i class="icon-base ti ti-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                        last: '<i class="icon-base ti ti-chevrons-right scaleX-n1-rtl icon-18px"></i>'
                    },
                    url: '//cdn.datatables.net/plug-ins/2.3.2/i18n/tr.json',
                },
                serverSide: true,
                ajax: {
                    url: '/ProductAttributeValue/ProductAttributeValueList',
                    type: 'POST',
                    contentType: 'application/json',
                    data: (d) => JSON.stringify(d),
                },
                columns: [
                    { data: 'Id' },
                    { data: 'Id', orderable: false, render: DataTable.render.select() },
                    { data: 'ProductAttribute.Name' },
                    { data: 'Name' },
                    { data: 'DisplayOrder' },
                    { data: 'Id' },
                ],
                columnDefs: [
                    { className: "control", searchable: false, orderable: false, responsivePriority: 2, targets: 0, render: () => "" },
                    {
                        targets: 1, orderable: false, searchable: false, responsivePriority: 3,
                        checkboxes: { selectAllRender: '<input type="checkbox" class="form-check-input">' },
                        render: () => '<input type="checkbox" class="dt-checkboxes form-check-input">'
                    },
                    {
                        targets: -1, title: "İşlemler", searchable: false, orderable: false,
                        render: (data, type, row) => `
                            <div class="d-inline-block text-nowrap">
                                <!-- Kalem: popup ile güncelle -->
                                <a href="javascript:void(0);"
                                   class="btn btn-text-secondary rounded-pill waves-effect btn-icon js-edit-pav"
                                   data-id="${row.Id}">
                                    <i class="icon-base ti ti-pencil icon-22px"></i>
                                </a>

                                <button class="btn btn-text-secondary rounded-pill waves-effect btn-icon dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                    <i class="icon-base ti ti-dots-vertical icon-22px"></i>
                                </button>
                                <div class="dropdown-menu dropdown-menu-end m-0">
                                    <a href="javascript:void(0);" class="dropdown-item js-edit-pav" data-id="${row.Id}">Güncelle</a>
                                    <a href="javascript:void(0);" class="dropdown-item text-danger js-delete-pav" data-id="${row.Id}">Sil</a>
                                </div>
                            </div>`
                    }
                ],
                select: { style: "multi", selector: "td:nth-child(2)" },
                order: [4, "asc"],       // DisplayOrder'a göre
                displayLength: 7,
                layout: {
                    topStart: {
                        rowClass: "card-header d-flex border-top rounded-0 flex-wrap py-0 flex-column flex-md-row align-items-start",
                        features: [
                            { search: { className: "me-5 ms-n4 pe-5 mb-n6 mb-md-0", placeholder: "Ara..", text: "_INPUT_" } }
                        ]
                    },
                    topEnd: {
                        rowClass: "row m-3 my-0 justify-content-between",
                        features: [
                            {
                                pageLength: { menu: [7, 10, 25, 50, 100], text: "_MENU_" },
                                buttons: [
                                    {
                                        extend: "collection",
                                        className: "btn btn-label-secondary dropdown-toggle me-4",
                                        text: `
                                            <span class="d-flex align-items-center gap-1">
                                                <i class="icon-base ti ti-upload icon-xs"></i>
                                                <span class="d-none d-sm-inline-block">Dışarı Aktar</span>
                                            </span>`,
                                        buttons: [
                                            { extend: "print", className: "dropdown-item", text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-printer me-1"></i> Print</span>`, exportOptions: { columns: [2,3,4] } },
                                            { extend: "csv",   className: "dropdown-item", text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-file me-1"></i> Csv</span>`,   exportOptions: { columns: [2,3,4] } },
                                            { extend: "excel", className: "dropdown-item", text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-upload me-1"></i> Excel</span>`, exportOptions: { columns: [2,3,4] } },
                                            { extend: "pdf",   className: "dropdown-item", text: `<span class="d-flex align-items-center"><i class="icon-base ti tabler-file-text me-1"></i> Pdf</span>`, exportOptions: { columns: [2,3,4] } },
                                            { extend: "copy",  className: "dropdown-item", text: `<i class="icon-base ti tabler-copy me-1"></i> Copy`,                                exportOptions: { columns: [2,3,4] } }
                                        ]
                                    },
                                    // Yeni Kayıt: create modal aç
                                    {
                                        text: `
                                            <i class="icon-base ti ti-plus me-0 me-sm-1 icon-16px"></i>
                                            <span class="d-none d-sm-inline-block">Yeni Kayıt</span>`,
                                        className: "add-new btn btn-primary",
                                        action: function () {
                                            const $form = $('#createAttributeValueForm');
                                            if ($form.length) $form[0].reset();
                                            if (window.createPAVValidation) window.createPAVValidation.resetForm(true);

                                            const $pa = $('#ProductAttributeId');
                                            if ($pa.data('select2')) $pa.val(null).trigger('change');

                                            $('#createAttributeValue').find('h3.mb-2').text('Yeni Varyant Değeri');
                                            $('#createAttributeValue').modal('show');
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    bottomStart: { rowClass: "row mx-3 justify-content-between", features: ["info"] },
                    bottomEnd: "paging"
                }
            });

            // ================== Görsel küçük ayarlar (opsiyonel) ==================
            setTimeout(() => {
                const adjustments = [
                    { selector: ".dt-buttons .btn", classToRemove: "btn-secondary" },
                    { selector: ".dt-buttons.btn-group", classToAdd: "mb-md-0 mb-6" },
                    { selector: ".dt-search .form-control", classToRemove: "form-control-sm", classToAdd: "ms-0" },
                    { selector: ".dt-search", classToAdd: "mb-0 mb-md-6" },
                    { selector: ".dt-length .form-select", classToRemove: "form-select-sm" },
                    { selector: ".dt-layout-end", classToAdd: "gap-md-2 gap-0 mt-0" },
                    { selector: ".dt-layout-start", classToAdd: "mt-0" },
                    { selector: ".dt-layout-table", classToRemove: "row mt-2" },
                    { selector: ".dt-layout-full", classToRemove: "col-md col-12", classToAdd: "table-responsive" }
                ];
                adjustments.forEach(({ selector, classToRemove, classToAdd }) => {
                    document.querySelectorAll(selector).forEach(el => {
                        if (classToRemove) classToRemove.split(" ").forEach(cls => el.classList.remove(cls));
                        if (classToAdd)    classToAdd.split(" ").forEach(cls => el.classList.add(cls));
                    });
                });
            }, 100);

            // ================== Select2 kaynakları ==================
            initPASelect('#ProductAttributeId', '#createAttributeValue');     // Create modal
            initPASelect('#Edit_ProductAttributeId', '#editAttributeValue');  // Edit modal

            // Tek seferlik cache: tüm attribute listesi (Edit text set etmek için)
            let _paCache = null;
            function fetchAllPA() {
                if (_paCache) return $.Deferred().resolve(_paCache).promise();
                return $.getJSON('/ProductAttributeValue/GetAllProductAttribute')
                         .then((data) => { _paCache = data?.results || []; return _paCache; });
            }

            function initPASelect(selector, modalSelector) {
                const $el = $(selector);
                if (!$el.length) return;

                $el.select2({
                    dropdownParent: $(modalSelector),
                    placeholder: 'Varyant adı seçin...',
                    allowClear: true,
                    ajax: {
                        url: '/ProductAttributeValue/GetAllProductAttribute',
                        type: 'GET',
                        dataType: 'json',
                        delay: 200,
                        processResults: function (data) {
                            return { results: data?.results || [] };
                        },
                        cache: true
                    },
                    width: '100%'
                });
            }

            // Seçili ProductAttributeId’yi Select2’ye yerleştir (ismi mümkünse doldur)
            function setSelect2Selected(selector, id, text) {
                const $el = $(selector);
                if (!id || !$el.length) return;

                const setOption = (t) => {
                    if (!$el.find("option[value='" + id + "']").length) {
                        const opt = new Option(t || ('#' + id), id, true, true);
                        $el.append(opt).trigger('change');
                    } else {
                        $el.val(id).trigger('change');
                    }
                };

                if (text && text.length) {
                    setOption(text);
                } else {
                    fetchAllPA().done(list => {
                        const hit = list.find(x => x.id === id) || null;
                        setOption(hit ? hit.text : null);
                    }).fail(() => setOption(null));
                }
            }

            // ================== CREATE: FormValidation + POST ==================
            (function () {
                const formEl = document.getElementById('createAttributeValueForm');
                if (!formEl) return;

                window.createPAVValidation = FormValidation.formValidation(formEl, {
                    locale: 'tr_TR',
                    localization: FormValidation.locales.tr_TR,
                    fields: {
                        ProductAttributeId: { validators: { notEmpty: { message: 'Varyant adı seçilmelidir.' } } },
                        Name: {
                            validators: {
                                notEmpty: { message: 'Değer adı boş bırakılamaz.' },
                                stringLength: { min: 1, max: 100, message: 'Değer adı 1–100 karakter olmalıdır.' }
                            }
                        },
                        DisplayOrder: {
                            validators: {
                                notEmpty: { message: 'Gösterim sırası boş bırakılamaz.' },
                                integer:  { message: 'Gösterim sırası tam sayı olmalıdır.' },
                                greaterThan: { inclusive: true, min: 0, message: '0 veya daha büyük olmalıdır.' }
                            }
                        }
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger(),
                        bootstrap5: new FormValidation.plugins.Bootstrap5({ eleValidClass: '', rowSelector: '.mb-3' }),
                        submitButton: new FormValidation.plugins.SubmitButton(),
                        autoFocus: new FormValidation.plugins.AutoFocus()
                    },
                    init: (instance) => {
                        instance.on('core.form.valid', function () {
                            const $form = $('#createAttributeValueForm');
                            $.ajax({
                                url: '/ProductAttributeValue/Create',
                                type: 'POST',
                                data: $form.serialize(), // ProductAttributeId, Name, DisplayOrder
                                success: function (res) {
                                    if (res && res.success) {
                                        Swal.fire({
                                            title: 'Başarılı!',
                                            text: 'Varyant değeri eklendi.',
                                            icon: 'success',
                                            confirmButtonText: 'Tamam',
                                            customClass: { confirmButton: 'btn btn-success' },
                                            buttonsStyling: false
                                        }).then(() => {
                                            $('#createAttributeValue').modal('hide');
                                            dt.ajax.reload(null, false);
                                        });
                                    } else {
                                        Swal.fire({
                                            title: 'Hata!',
                                            text: (res && res.message) || 'Bir hata oluştu.',
                                            icon: 'error',
                                            confirmButtonText: 'Tamam',
                                            customClass: { confirmButton: 'btn btn-danger' },
                                            buttonsStyling: false
                                        });
                                    }
                                },
                                error: function (xhr) {
                                    Swal.fire({
                                        title: 'Hata!',
                                        text: xhr.responseText || 'İşlem sırasında bir hata oluştu.',
                                        icon: 'error',
                                        confirmButtonText: 'Tamam',
                                        customClass: { confirmButton: 'btn btn-danger' },
                                        buttonsStyling: false
                                    });
                                }
                            });
                        });
                    }
                });
            })();

            // ================== EDIT: Aç (GET), doldur, POST ==================
            $(document).on('click', '.js-edit-pav', function () {
                const id = $(this).data('id');
                if (!id) return;

                const $editForm = $('#editAttributeValueForm');
                if ($editForm.length) $editForm[0].reset();
                if (window.editPAVValidation) window.editPAVValidation.resetForm(true);

                $.getJSON('/ProductAttributeValue/Edit', { id: id })
                 .done(function (m) {
                    // Beklenen JSON: { Id, Name, ProductAttributeId, DisplayOrder }
                    $('#Edit_Id').val(m.Id);
                    $('#Edit_Name').val(m.Name ?? '');
                    $('#Edit_DisplayOrder').val(m.DisplayOrder ?? 0);

                    // ProductAttribute select2'yi seçili getir (text yoksa cache'ten bul)
                    setSelect2Selected('#Edit_ProductAttributeId', m.ProductAttributeId /*, m.ProductAttributeName*/);

                    $('#editAttributeValue').find('h3.mb-2').text('Varyant Değeri Güncelle');
                    $('#editAttributeValue').modal('show');
                 })
                 .fail(function (xhr) {
                    Swal.fire({
                        title: 'Hata!',
                        text: xhr.responseText || 'Kayıt bilgisi alınamadı.',
                        icon: 'error',
                        confirmButtonText: 'Tamam',
                        customClass: { confirmButton: 'btn btn-danger' },
                        buttonsStyling: false
                    });
                 });
            });

            (function () {
                const editFormEl = document.getElementById('editAttributeValueForm');
                if (!editFormEl) return;

                window.editPAVValidation = FormValidation.formValidation(editFormEl, {
                    locale: 'tr_TR',
                    localization: FormValidation.locales.tr_TR,
                    fields: {
                        ProductAttributeId: { validators: { notEmpty: { message: 'Varyant adı seçilmelidir.' } } },
                        Name: {
                            validators: {
                                notEmpty: { message: 'Değer adı boş bırakılamaz.' },
                                stringLength: { min: 1, max: 100, message: 'Değer adı 1–100 karakter olmalıdır.' }
                            }
                        },
                        DisplayOrder: {
                            validators: {
                                notEmpty: { message: 'Gösterim sırası boş bırakılamaz.' },
                                integer:  { message: 'Gösterim sırası tam sayı olmalıdır.' },
                                greaterThan: { inclusive: true, min: 0, message: '0 veya daha büyük olmalıdır.' }
                            }
                        }
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger(),
                        bootstrap5: new FormValidation.plugins.Bootstrap5({ eleValidClass: '', rowSelector: '.mb-3' }),
                        submitButton: new FormValidation.plugins.SubmitButton(),
                        autoFocus: new FormValidation.plugins.AutoFocus()
                    },
                    init: (instance) => {
                        instance.on('core.form.valid', function () {
                            const $form = $('#editAttributeValueForm');
                            $.ajax({
                                url: '/ProductAttributeValue/Edit',
                                type: 'POST',
                                data: $form.serialize(), // Id, ProductAttributeId, Name, DisplayOrder
                                success: function (res) {
                                    if (res && res.success) {
                                        Swal.fire({
                                            title: 'Güncellendi!',
                                            text: 'Varyant değeri başarıyla güncellendi.',
                                            icon: 'success',
                                            confirmButtonText: 'Tamam',
                                            customClass: { confirmButton: 'btn btn-success' },
                                            buttonsStyling: false
                                        }).then(() => {
                                            $('#editAttributeValue').modal('hide');
                                            dt.ajax.reload(null, false);
                                        });
                                    } else {
                                        Swal.fire({
                                            title: 'Hata!',
                                            text: (res && res.message) || 'Güncelleme sırasında bir hata oluştu.',
                                            icon: 'error',
                                            confirmButtonText: 'Tamam',
                                            customClass: { confirmButton: 'btn btn-danger' },
                                            buttonsStyling: false
                                        });
                                    }
                                },
                                error: function (xhr) {
                                    Swal.fire({
                                        title: 'Hata!',
                                        text: xhr.responseText || 'İşlem sırasında bir hata oluştu.',
                                        icon: 'error',
                                        confirmButtonText: 'Tamam',
                                        customClass: { confirmButton: 'btn btn-danger' },
                                        buttonsStyling: false
                                    });
                                }
                            });
                        });
                    }
                });
            })();

            // ================== DELETE: SweetAlert2 onay + POST ==================
            $(document).on('click', '.js-delete-pav', function () {
                const id = $(this).data('id');
                if (!id) return;

                Swal.fire({
                    title: 'Emin misiniz?',
                    text: 'Bu işlem geri alınamaz!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Evet, sil!',
                    cancelButtonText: 'Vazgeç',
                    customClass: {
                        confirmButton: 'btn btn-danger me-2',
                        cancelButton: 'btn btn-label-secondary'
                    },
                    buttonsStyling: false
                }).then((result) => {
                    if (!result.isConfirmed) return;

                    $.ajax({
                        url: '/ProductAttributeValue/Delete',
                        type: 'POST',
                        data: { id: id },
                        success: function (res) {
                            if (res && res.success) {
                                Swal.fire({
                                    title: 'Silindi!',
                                    text: 'Varyant değeri başarıyla silindi.',
                                    icon: 'success',
                                    confirmButtonText: 'Tamam',
                                    customClass: { confirmButton: 'btn btn-success' },
                                    buttonsStyling: false
                                });
                                dt.ajax.reload(null, false);
                            } else {
                                Swal.fire({
                                    title: 'Hata!',
                                    text: (res && res.message) || 'Silme sırasında hata oluştu.',
                                    icon: 'error',
                                    confirmButtonText: 'Tamam',
                                    customClass: { confirmButton: 'btn btn-danger' },
                                    buttonsStyling: false
                                });
                            }
                        },
                        error: function (xhr) {
                            Swal.fire({
                                title: 'Hata!',
                                text: xhr.responseText || 'İşlem sırasında hata oluştu.',
                                icon: 'error',
                                confirmButtonText: 'Tamam',
                                customClass: { confirmButton: 'btn btn-danger' },
                                buttonsStyling: false
                            });
                        }
                    });
                });
            });
        });
    </script>
}
